# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class Destiny2Api(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def destiny2_activate_talent_node(self, **kwargs):
        """
        Activate a Talent Node.  Chill out, everyone: we haven't decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_activate_talent_node(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_activate_talent_node_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_activate_talent_node_with_http_info(**kwargs)
            return data

    def destiny2_activate_talent_node_with_http_info(self, **kwargs):
        """
        Activate a Talent Node.  Chill out, everyone: we haven't decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_activate_talent_node_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_activate_talent_node" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Actions/Items/ActivateTalentNode/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_equip_item(self, **kwargs):
        """
        Equip an item.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_equip_item(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_equip_item_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_equip_item_with_http_info(**kwargs)
            return data

    def destiny2_equip_item_with_http_info(self, **kwargs):
        """
        Equip an item.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_equip_item_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_equip_item" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Actions/Items/EquipItem/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_equip_items(self, **kwargs):
        """
        Equip a list of items by itemInstanceIds.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  Any items not found on your character will be ignored.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_equip_items(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_equip_items_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_equip_items_with_http_info(**kwargs)
            return data

    def destiny2_equip_items_with_http_info(self, **kwargs):
        """
        Equip a list of items by itemInstanceIds.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  Any items not found on your character will be ignored.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_equip_items_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_equip_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Actions/Items/EquipItems/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_activity_history(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets activity history stats for indicated character.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_activity_history(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The id of the character to retrieve. (required)
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str count: Number of rows to return
        :param str mode: A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.
        :param str page: Page number to return, starting with 0.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_activity_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_activity_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_activity_history_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets activity history stats for indicated character.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_activity_history_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The id of the character to retrieve. (required)
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str count: Number of rows to return
        :param str mode: A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.
        :param str page: Page number to return, starting with 0.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'count', 'mode', 'page']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_activity_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_activity_history`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_activity_history`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_activity_history`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))
        if 'mode' in params:
            query_params.append(('mode', params['mode']))
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_character(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Returns character information for the supplied character.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_character(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: ID of the character. (required)
        :param str destiny_membership_id: Destiny membership ID. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param list[ComponentsschemasDestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_character_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Returns character information for the supplied character.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_character_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: ID of the character. (required)
        :param str destiny_membership_id: Destiny membership ID. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param list[ComponentsschemasDestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'components']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_character" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_character`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_character`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_character`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))
            collection_formats['components'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_clan_aggregate_stats(self, group_id, **kwargs):
        """
        Gets aggregated stats for a clan using the same categories as the clan leaderboards.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_aggregate_stats(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_clan_aggregate_stats_with_http_info(group_id, **kwargs)
        else:
            (data) = self.destiny2_get_clan_aggregate_stats_with_http_info(group_id, **kwargs)
            return data

    def destiny2_get_clan_aggregate_stats_with_http_info(self, group_id, **kwargs):
        """
        Gets aggregated stats for a clan using the same categories as the clan leaderboards.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_aggregate_stats_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'modes']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_clan_aggregate_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `destiny2_get_clan_aggregate_stats`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = []
        if 'modes' in params:
            query_params.append(('modes', params['modes']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Stats/AggregateClanStats/{groupId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_clan_leaderboards(self, group_id, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_leaderboards(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_clan_leaderboards_with_http_info(group_id, **kwargs)
        else:
            (data) = self.destiny2_get_clan_leaderboards_with_http_info(group_id, **kwargs)
            return data

    def destiny2_get_clan_leaderboards_with_http_info(self, group_id, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_leaderboards_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'maxtop', 'modes', 'statid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_clan_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `destiny2_get_clan_leaderboards`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))
        if 'modes' in params:
            query_params.append(('modes', params['modes']))
        if 'statid' in params:
            query_params.append(('statid', params['statid']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Stats/Leaderboards/Clans/{groupId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_clan_weekly_reward_state(self, group_id, **kwargs):
        """
        Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_weekly_reward_state(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: A valid group id of clan. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_clan_weekly_reward_state_with_http_info(group_id, **kwargs)
        else:
            (data) = self.destiny2_get_clan_weekly_reward_state_with_http_info(group_id, **kwargs)
            return data

    def destiny2_get_clan_weekly_reward_state_with_http_info(self, group_id, **kwargs):
        """
        Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_weekly_reward_state_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: A valid group id of clan. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_clan_weekly_reward_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `destiny2_get_clan_weekly_reward_state`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Clan/{groupId}/WeeklyRewardState/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_destiny_aggregate_activity_stats(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets all activities the character has participated in together with aggregate statistics for those activities.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_destiny_aggregate_activity_stats(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The specific character whose activities should be returned. (required)
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_destiny_aggregate_activity_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_destiny_aggregate_activity_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_destiny_aggregate_activity_stats_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets all activities the character has participated in together with aggregate statistics for those activities.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_destiny_aggregate_activity_stats_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The specific character whose activities should be returned. (required)
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_destiny_aggregate_activity_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_destiny_aggregate_activity_stats`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_destiny_aggregate_activity_stats`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_destiny_aggregate_activity_stats`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_destiny_manifest(self, **kwargs):
        """
        Returns the current version of the manifest as a json object.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_destiny_manifest(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_destiny_manifest_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_get_destiny_manifest_with_http_info(**kwargs)
            return data

    def destiny2_get_destiny_manifest_with_http_info(self, **kwargs):
        """
        Returns the current version of the manifest as a json object.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_destiny_manifest_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_destiny_manifest" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Manifest/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_historical_stats(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets historical stats for indicated character.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters. (required)
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str dayend: Last day to return when daily stats are requested.  Use the format YYYY-MM-DD.
        :param str daystart: First day to return when daily stats are requested. Use the format YYYY-MM-DD
        :param str groups: Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals
        :param str modes: Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str period_type: Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_historical_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_historical_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_historical_stats_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets historical stats for indicated character.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters. (required)
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str dayend: Last day to return when daily stats are requested.  Use the format YYYY-MM-DD.
        :param str daystart: First day to return when daily stats are requested. Use the format YYYY-MM-DD
        :param str groups: Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals
        :param str modes: Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str period_type: Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'dayend', 'daystart', 'groups', 'modes', 'period_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_historical_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_historical_stats`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_historical_stats`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_historical_stats`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'dayend' in params:
            query_params.append(('dayend', params['dayend']))
        if 'daystart' in params:
            query_params.append(('daystart', params['daystart']))
        if 'groups' in params:
            query_params.append(('groups', params['groups']))
        if 'modes' in params:
            query_params.append(('modes', params['modes']))
        if 'period_type' in params:
            query_params.append(('periodType', params['period_type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_historical_stats_definition(self, **kwargs):
        """
        Gets historical stats definitions.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats_definition(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_historical_stats_definition_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_get_historical_stats_definition_with_http_info(**kwargs)
            return data

    def destiny2_get_historical_stats_definition_with_http_info(self, **kwargs):
        """
        Gets historical stats definitions.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats_definition_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_historical_stats_definition" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Stats/Definition/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_historical_stats_for_account(self, destiny_membership_id, membership_type, **kwargs):
        """
        Gets aggregate historical stats organized around each character for a given account.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats_for_account(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str groups: Groups of stats to include, otherwise only general stats are returned.  Comma separated list is allowed. Values: General, Weapons, Medals.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_historical_stats_for_account_with_http_info(destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_historical_stats_for_account_with_http_info(destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_historical_stats_for_account_with_http_info(self, destiny_membership_id, membership_type, **kwargs):
        """
        Gets aggregate historical stats organized around each character for a given account.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats_for_account_with_http_info(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str groups: Groups of stats to include, otherwise only general stats are returned.  Comma separated list is allowed. Values: General, Weapons, Medals.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'membership_type', 'groups']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_historical_stats_for_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_historical_stats_for_account`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_historical_stats_for_account`")


        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'groups' in params:
            query_params.append(('groups', params['groups']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_item(self, destiny_membership_id, item_instance_id, membership_type, **kwargs):
        """
        Retrieve the details of an instanced Destiny Item.  An instanced Destiny item is one with an ItemInstanceId.  Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_item(destiny_membership_id, item_instance_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str destiny_membership_id: The membership ID of the destiny profile. (required)
        :param str item_instance_id: The Instance ID of the destiny item. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_item_with_http_info(destiny_membership_id, item_instance_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_item_with_http_info(destiny_membership_id, item_instance_id, membership_type, **kwargs)
            return data

    def destiny2_get_item_with_http_info(self, destiny_membership_id, item_instance_id, membership_type, **kwargs):
        """
        Retrieve the details of an instanced Destiny Item.  An instanced Destiny item is one with an ItemInstanceId.  Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_item_with_http_info(destiny_membership_id, item_instance_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str destiny_membership_id: The membership ID of the destiny profile. (required)
        :param str item_instance_id: The Instance ID of the destiny item. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'item_instance_id', 'membership_type', 'components']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_item`")
        # verify the required parameter 'item_instance_id' is set
        if ('item_instance_id' not in params) or (params['item_instance_id'] is None):
            raise ValueError("Missing the required parameter `item_instance_id` when calling `destiny2_get_item`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_item`")


        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'item_instance_id' in params:
            path_params['itemInstanceId'] = params['item_instance_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_leaderboards(self, destiny_membership_id, membership_type, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint has not yet been implemented.  It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_leaderboards_with_http_info(self, destiny_membership_id, membership_type, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint has not yet been implemented.  It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'membership_type', 'maxtop', 'modes', 'statid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_leaderboards`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_leaderboards`")


        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))
        if 'modes' in params:
            query_params.append(('modes', params['modes']))
        if 'statid' in params:
            query_params.append(('statid', params['statid']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_leaderboards_for_character(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards_for_character(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The specific character to build the leaderboard around for the provided Destiny Membership. (required)
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_leaderboards_for_character_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The specific character to build the leaderboard around for the provided Destiny Membership. (required)
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'maxtop', 'modes', 'statid']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_leaderboards_for_character" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_leaderboards_for_character`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_leaderboards_for_character`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_leaderboards_for_character`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))
        if 'modes' in params:
            query_params.append(('modes', params['modes']))
        if 'statid' in params:
            query_params.append(('statid', params['statid']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_post_game_carnage_report(self, activity_id, **kwargs):
        """
        Gets the available post game carnage report for the activity ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_post_game_carnage_report(activity_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str activity_id: The ID of the activity whose PGCR is requested. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_post_game_carnage_report_with_http_info(activity_id, **kwargs)
        else:
            (data) = self.destiny2_get_post_game_carnage_report_with_http_info(activity_id, **kwargs)
            return data

    def destiny2_get_post_game_carnage_report_with_http_info(self, activity_id, **kwargs):
        """
        Gets the available post game carnage report for the activity ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_post_game_carnage_report_with_http_info(activity_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str activity_id: The ID of the activity whose PGCR is requested. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activity_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_post_game_carnage_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params) or (params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `destiny2_get_post_game_carnage_report`")


        collection_formats = {}

        path_params = {}
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Stats/PostGameCarnageReport/{activityId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_profile(self, destiny_membership_id, membership_type, **kwargs):
        """
        Returns Destiny Profile information for the supplied membership.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_profile(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str destiny_membership_id: Destiny membership ID. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_profile_with_http_info(destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_profile_with_http_info(destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_profile_with_http_info(self, destiny_membership_id, membership_type, **kwargs):
        """
        Returns Destiny Profile information for the supplied membership.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_profile_with_http_info(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str destiny_membership_id: Destiny membership ID. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'membership_type', 'components']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_profile`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_profile`")


        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Profile/{destinyMembershipId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_public_milestone_content(self, milestone_hash, **kwargs):
        """
        Gets custom localized content for the milestone of the given hash, if it exists.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_public_milestone_content(milestone_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str milestone_hash: The identifier for the milestone to be returned. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_public_milestone_content_with_http_info(milestone_hash, **kwargs)
        else:
            (data) = self.destiny2_get_public_milestone_content_with_http_info(milestone_hash, **kwargs)
            return data

    def destiny2_get_public_milestone_content_with_http_info(self, milestone_hash, **kwargs):
        """
        Gets custom localized content for the milestone of the given hash, if it exists.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_public_milestone_content_with_http_info(milestone_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str milestone_hash: The identifier for the milestone to be returned. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['milestone_hash']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_public_milestone_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'milestone_hash' is set
        if ('milestone_hash' not in params) or (params['milestone_hash'] is None):
            raise ValueError("Missing the required parameter `milestone_hash` when calling `destiny2_get_public_milestone_content`")


        collection_formats = {}

        path_params = {}
        if 'milestone_hash' in params:
            path_params['milestoneHash'] = params['milestone_hash']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Milestones/{milestoneHash}/Content/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_public_milestones(self, **kwargs):
        """
        Gets public information about currently available Milestones.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_public_milestones(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_public_milestones_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_get_public_milestones_with_http_info(**kwargs)
            return data

    def destiny2_get_public_milestones_with_http_info(self, **kwargs):
        """
        Gets public information about currently available Milestones.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_public_milestones_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_public_milestones" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Milestones/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_unique_weapon_history(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets details about unique weapon usage, including all exotic weapons.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_unique_weapon_history(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The id of the character to retrieve. (required)
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_unique_weapon_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_unique_weapon_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_unique_weapon_history_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets details about unique weapon usage, including all exotic weapons.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_unique_weapon_history_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The id of the character to retrieve. (required)
        :param str destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_unique_weapon_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_unique_weapon_history`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_unique_weapon_history`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_unique_weapon_history`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_vendor(self, character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs):
        """
        Get the details of a specific Vendor.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendor(character_id, destiny_membership_id, membership_type, vendor_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param str destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str vendor_hash: The Hash identifier of the Vendor to be returned. (required)
        :param str components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs)
        else:
            (data) = self.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs)
            return data

    def destiny2_get_vendor_with_http_info(self, character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs):
        """
        Get the details of a specific Vendor.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param str destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str vendor_hash: The Hash identifier of the Vendor to be returned. (required)
        :param str components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'vendor_hash', 'components']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_vendor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_vendor`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_vendor`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_vendor`")
        # verify the required parameter 'vendor_hash' is set
        if ('vendor_hash' not in params) or (params['vendor_hash'] is None):
            raise ValueError("Missing the required parameter `vendor_hash` when calling `destiny2_get_vendor`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']
        if 'vendor_hash' in params:
            path_params['vendorHash'] = params['vendor_hash']

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_vendors(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Get currently available vendors.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendors(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param str destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_vendors_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Get currently available vendors.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param str destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param str membership_type: A valid non-BungieNet membership type. (required)
        :param str components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'components']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_vendors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_vendors`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_vendors`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_vendors`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_insert_socket_plug(self, **kwargs):
        """
        Insert a plug into a socketed item.  I know how it sounds, but I assure you it's much more G-rated than you might be guessing.  We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_insert_socket_plug(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_insert_socket_plug_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_insert_socket_plug_with_http_info(**kwargs)
            return data

    def destiny2_insert_socket_plug_with_http_info(self, **kwargs):
        """
        Insert a plug into a socketed item.  I know how it sounds, but I assure you it's much more G-rated than you might be guessing.  We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_insert_socket_plug_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_insert_socket_plug" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Actions/Items/InsertSocketPlug/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_search_destiny_entities(self, search_term, type, **kwargs):
        """
        Gets a page list of Destiny items.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_search_destiny_entities(search_term, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_term: The string to use when searching for Destiny entities. (required)
        :param str type: The type of entity for whom you would like results.  These correspond to the entity's definition contract name.  For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is tentatively in final form, but there may be bugs that prevent desirable operation. (required)
        :param str page: Page number to return, starting with 0.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_search_destiny_entities_with_http_info(search_term, type, **kwargs)
        else:
            (data) = self.destiny2_search_destiny_entities_with_http_info(search_term, type, **kwargs)
            return data

    def destiny2_search_destiny_entities_with_http_info(self, search_term, type, **kwargs):
        """
        Gets a page list of Destiny items.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_search_destiny_entities_with_http_info(search_term, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_term: The string to use when searching for Destiny entities. (required)
        :param str type: The type of entity for whom you would like results.  These correspond to the entity's definition contract name.  For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is tentatively in final form, but there may be bugs that prevent desirable operation. (required)
        :param str page: Page number to return, starting with 0.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_term', 'type', 'page']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_search_destiny_entities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_term' is set
        if ('search_term' not in params) or (params['search_term'] is None):
            raise ValueError("Missing the required parameter `search_term` when calling `destiny2_search_destiny_entities`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `destiny2_search_destiny_entities`")


        collection_formats = {}

        path_params = {}
        if 'search_term' in params:
            path_params['searchTerm'] = params['search_term']
        if 'type' in params:
            path_params['type'] = params['type']

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Armory/Search/{type}/{searchTerm}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_search_destiny_player(self, display_name, membership_type, **kwargs):
        """
        Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_search_destiny_player(display_name, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str display_name: The full gamertag or PSN id of the player. Spaces and case are ignored. (required)
        :param str membership_type: A valid non-BungieNet membership type, or All. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_search_destiny_player_with_http_info(display_name, membership_type, **kwargs)
        else:
            (data) = self.destiny2_search_destiny_player_with_http_info(display_name, membership_type, **kwargs)
            return data

    def destiny2_search_destiny_player_with_http_info(self, display_name, membership_type, **kwargs):
        """
        Returns a list of Destiny memberships given a full Gamertag or PSN ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_search_destiny_player_with_http_info(display_name, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str display_name: The full gamertag or PSN id of the player. Spaces and case are ignored. (required)
        :param str membership_type: A valid non-BungieNet membership type, or All. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_name', 'membership_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_search_destiny_player" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_name' is set
        if ('display_name' not in params) or (params['display_name'] is None):
            raise ValueError("Missing the required parameter `display_name` when calling `destiny2_search_destiny_player`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_search_destiny_player`")


        collection_formats = {}

        path_params = {}
        if 'display_name' in params:
            path_params['displayName'] = params['display_name']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/SearchDestinyPlayer/{membershipType}/{displayName}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_set_item_lock_state(self, **kwargs):
        """
        Set the Lock State for an instanced item.  You must have a valid Destiny Account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_set_item_lock_state(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_set_item_lock_state_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_set_item_lock_state_with_http_info(**kwargs)
            return data

    def destiny2_set_item_lock_state_with_http_info(self, **kwargs):
        """
        Set the Lock State for an instanced item.  You must have a valid Destiny Account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_set_item_lock_state_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_set_item_lock_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Actions/Items/SetLockState/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_transfer_item(self, **kwargs):
        """
        Transfer an item to/from your vault.  You must have a valid Destiny account.  You must also pass BOTH a reference AND an instance ID if it's an instanced item.  itshappening.gif
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_transfer_item(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_transfer_item_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_transfer_item_with_http_info(**kwargs)
            return data

    def destiny2_transfer_item_with_http_info(self, **kwargs):
        """
        Transfer an item to/from your vault.  You must have a valid Destiny account.  You must also pass BOTH a reference AND an instance ID if it's an instanced item.  itshappening.gif
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_transfer_item_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_transfer_item" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Actions/Items/TransferItem/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
