# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class CommunityContentApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def community_content_get_community_content(self, media_filter, page, sort, **kwargs):
        """
        Returns community content.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_community_content(media_filter, page, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param str media_filter: The type of media to get (required)
        :param str page: Zero based page (required)
        :param str sort: The sort mode. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.community_content_get_community_content_with_http_info(media_filter, page, sort, **kwargs)
        else:
            (data) = self.community_content_get_community_content_with_http_info(media_filter, page, sort, **kwargs)
            return data

    def community_content_get_community_content_with_http_info(self, media_filter, page, sort, **kwargs):
        """
        Returns community content.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_community_content_with_http_info(media_filter, page, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param str media_filter: The type of media to get (required)
        :param str page: Zero based page (required)
        :param str sort: The sort mode. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_filter', 'page', 'sort']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_content_get_community_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_filter' is set
        if ('media_filter' not in params) or (params['media_filter'] is None):
            raise ValueError("Missing the required parameter `media_filter` when calling `community_content_get_community_content`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `community_content_get_community_content`")
        # verify the required parameter 'sort' is set
        if ('sort' not in params) or (params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `community_content_get_community_content`")


        collection_formats = {}

        path_params = {}
        if 'media_filter' in params:
            path_params['mediaFilter'] = params['media_filter']
        if 'page' in params:
            path_params['page'] = params['page']
        if 'sort' in params:
            path_params['sort'] = params['sort']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/CommunityContent/Get/{sort}/{mediaFilter}/{page}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def community_content_get_community_live_statuses(self, page, partnership_type, sort, **kwargs):
        """
        Returns info about community members who are live streaming.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_community_live_statuses(page, partnership_type, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page: Zero based page. (required)
        :param str partnership_type: The type of partnership for which the status should be returned. (required)
        :param str sort: The sort mode. (required)
        :param str mode_hash: The hash of the Activity Mode for which streams should be retrieved.  Don't pass it in or pass 0 to not filter by mode.
        :param str stream_locale: The locale for streams you'd like to see.  Don't pass this to fall back on your BNet locale.  Pass 'ALL' to not filter by locale.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.community_content_get_community_live_statuses_with_http_info(page, partnership_type, sort, **kwargs)
        else:
            (data) = self.community_content_get_community_live_statuses_with_http_info(page, partnership_type, sort, **kwargs)
            return data

    def community_content_get_community_live_statuses_with_http_info(self, page, partnership_type, sort, **kwargs):
        """
        Returns info about community members who are live streaming.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_community_live_statuses_with_http_info(page, partnership_type, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page: Zero based page. (required)
        :param str partnership_type: The type of partnership for which the status should be returned. (required)
        :param str sort: The sort mode. (required)
        :param str mode_hash: The hash of the Activity Mode for which streams should be retrieved.  Don't pass it in or pass 0 to not filter by mode.
        :param str stream_locale: The locale for streams you'd like to see.  Don't pass this to fall back on your BNet locale.  Pass 'ALL' to not filter by locale.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'partnership_type', 'sort', 'mode_hash', 'stream_locale']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_content_get_community_live_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `community_content_get_community_live_statuses`")
        # verify the required parameter 'partnership_type' is set
        if ('partnership_type' not in params) or (params['partnership_type'] is None):
            raise ValueError("Missing the required parameter `partnership_type` when calling `community_content_get_community_live_statuses`")
        # verify the required parameter 'sort' is set
        if ('sort' not in params) or (params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `community_content_get_community_live_statuses`")


        collection_formats = {}

        path_params = {}
        if 'page' in params:
            path_params['page'] = params['page']
        if 'partnership_type' in params:
            path_params['partnershipType'] = params['partnership_type']
        if 'sort' in params:
            path_params['sort'] = params['sort']

        query_params = []
        if 'mode_hash' in params:
            query_params.append(('modeHash', params['mode_hash']))
        if 'stream_locale' in params:
            query_params.append(('streamLocale', params['stream_locale']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/CommunityContent/Live/All/{partnershipType}/{sort}/{page}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def community_content_get_community_live_statuses_for_clanmates(self, page, partnership_type, sort, **kwargs):
        """
        Returns info about community members who are live streaming in your clans.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_community_live_statuses_for_clanmates(page, partnership_type, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page: Zero based page. (required)
        :param str partnership_type: The type of partnership for which the status should be returned. (required)
        :param str sort: The sort mode. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.community_content_get_community_live_statuses_for_clanmates_with_http_info(page, partnership_type, sort, **kwargs)
        else:
            (data) = self.community_content_get_community_live_statuses_for_clanmates_with_http_info(page, partnership_type, sort, **kwargs)
            return data

    def community_content_get_community_live_statuses_for_clanmates_with_http_info(self, page, partnership_type, sort, **kwargs):
        """
        Returns info about community members who are live streaming in your clans.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_community_live_statuses_for_clanmates_with_http_info(page, partnership_type, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page: Zero based page. (required)
        :param str partnership_type: The type of partnership for which the status should be returned. (required)
        :param str sort: The sort mode. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'partnership_type', 'sort']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_content_get_community_live_statuses_for_clanmates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `community_content_get_community_live_statuses_for_clanmates`")
        # verify the required parameter 'partnership_type' is set
        if ('partnership_type' not in params) or (params['partnership_type'] is None):
            raise ValueError("Missing the required parameter `partnership_type` when calling `community_content_get_community_live_statuses_for_clanmates`")
        # verify the required parameter 'sort' is set
        if ('sort' not in params) or (params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `community_content_get_community_live_statuses_for_clanmates`")


        collection_formats = {}

        path_params = {}
        if 'page' in params:
            path_params['page'] = params['page']
        if 'partnership_type' in params:
            path_params['partnershipType'] = params['partnership_type']
        if 'sort' in params:
            path_params['sort'] = params['sort']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/CommunityContent/Live/Clan/{partnershipType}/{sort}/{page}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def community_content_get_community_live_statuses_for_friends(self, page, partnership_type, sort, **kwargs):
        """
        Returns info about community members who are live streaming among your friends.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_community_live_statuses_for_friends(page, partnership_type, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page: Zero based page. (required)
        :param str partnership_type: The type of partnership for which the status should be returned. (required)
        :param str sort: The sort mode. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.community_content_get_community_live_statuses_for_friends_with_http_info(page, partnership_type, sort, **kwargs)
        else:
            (data) = self.community_content_get_community_live_statuses_for_friends_with_http_info(page, partnership_type, sort, **kwargs)
            return data

    def community_content_get_community_live_statuses_for_friends_with_http_info(self, page, partnership_type, sort, **kwargs):
        """
        Returns info about community members who are live streaming among your friends.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_community_live_statuses_for_friends_with_http_info(page, partnership_type, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page: Zero based page. (required)
        :param str partnership_type: The type of partnership for which the status should be returned. (required)
        :param str sort: The sort mode. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'partnership_type', 'sort']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_content_get_community_live_statuses_for_friends" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `community_content_get_community_live_statuses_for_friends`")
        # verify the required parameter 'partnership_type' is set
        if ('partnership_type' not in params) or (params['partnership_type'] is None):
            raise ValueError("Missing the required parameter `partnership_type` when calling `community_content_get_community_live_statuses_for_friends`")
        # verify the required parameter 'sort' is set
        if ('sort' not in params) or (params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `community_content_get_community_live_statuses_for_friends`")


        collection_formats = {}

        path_params = {}
        if 'page' in params:
            path_params['page'] = params['page']
        if 'partnership_type' in params:
            path_params['partnershipType'] = params['partnership_type']
        if 'sort' in params:
            path_params['sort'] = params['sort']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/CommunityContent/Live/Friends/{partnershipType}/{sort}/{page}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def community_content_get_featured_community_live_statuses(self, page, partnership_type, sort, **kwargs):
        """
        Returns info about Featured live streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_featured_community_live_statuses(page, partnership_type, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page: Zero based page. (required)
        :param str partnership_type: The type of partnership for which the status should be returned. (required)
        :param str sort: The sort mode. (required)
        :param str stream_locale: The locale for streams you'd like to see.  Don't pass this to fall back on your BNet locale.  Pass 'ALL' to not filter by locale.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.community_content_get_featured_community_live_statuses_with_http_info(page, partnership_type, sort, **kwargs)
        else:
            (data) = self.community_content_get_featured_community_live_statuses_with_http_info(page, partnership_type, sort, **kwargs)
            return data

    def community_content_get_featured_community_live_statuses_with_http_info(self, page, partnership_type, sort, **kwargs):
        """
        Returns info about Featured live streams.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_featured_community_live_statuses_with_http_info(page, partnership_type, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page: Zero based page. (required)
        :param str partnership_type: The type of partnership for which the status should be returned. (required)
        :param str sort: The sort mode. (required)
        :param str stream_locale: The locale for streams you'd like to see.  Don't pass this to fall back on your BNet locale.  Pass 'ALL' to not filter by locale.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'partnership_type', 'sort', 'stream_locale']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_content_get_featured_community_live_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `community_content_get_featured_community_live_statuses`")
        # verify the required parameter 'partnership_type' is set
        if ('partnership_type' not in params) or (params['partnership_type'] is None):
            raise ValueError("Missing the required parameter `partnership_type` when calling `community_content_get_featured_community_live_statuses`")
        # verify the required parameter 'sort' is set
        if ('sort' not in params) or (params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `community_content_get_featured_community_live_statuses`")


        collection_formats = {}

        path_params = {}
        if 'page' in params:
            path_params['page'] = params['page']
        if 'partnership_type' in params:
            path_params['partnershipType'] = params['partnership_type']
        if 'sort' in params:
            path_params['sort'] = params['sort']

        query_params = []
        if 'stream_locale' in params:
            query_params.append(('streamLocale', params['stream_locale']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/CommunityContent/Live/Featured/{partnershipType}/{sort}/{page}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def community_content_get_streaming_status_for_member(self, membership_id, membership_type, partnership_type, **kwargs):
        """
        Gets the Live Streaming status of a particular Account and Membership Type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_streaming_status_for_member(membership_id, membership_type, partnership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str membership_id: The membershipId related to that type. (required)
        :param str membership_type: The type of account for which info will be extracted. (required)
        :param str partnership_type: The type of partnership for which info will be extracted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.community_content_get_streaming_status_for_member_with_http_info(membership_id, membership_type, partnership_type, **kwargs)
        else:
            (data) = self.community_content_get_streaming_status_for_member_with_http_info(membership_id, membership_type, partnership_type, **kwargs)
            return data

    def community_content_get_streaming_status_for_member_with_http_info(self, membership_id, membership_type, partnership_type, **kwargs):
        """
        Gets the Live Streaming status of a particular Account and Membership Type.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.community_content_get_streaming_status_for_member_with_http_info(membership_id, membership_type, partnership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str membership_id: The membershipId related to that type. (required)
        :param str membership_type: The type of account for which info will be extracted. (required)
        :param str partnership_type: The type of partnership for which info will be extracted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['membership_id', 'membership_type', 'partnership_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_content_get_streaming_status_for_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'membership_id' is set
        if ('membership_id' not in params) or (params['membership_id'] is None):
            raise ValueError("Missing the required parameter `membership_id` when calling `community_content_get_streaming_status_for_member`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `community_content_get_streaming_status_for_member`")
        # verify the required parameter 'partnership_type' is set
        if ('partnership_type' not in params) or (params['partnership_type'] is None):
            raise ValueError("Missing the required parameter `partnership_type` when calling `community_content_get_streaming_status_for_member`")


        collection_formats = {}

        path_params = {}
        if 'membership_id' in params:
            path_params['membershipId'] = params['membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']
        if 'partnership_type' in params:
            path_params['partnershipType'] = params['partnership_type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/CommunityContent/Live/Users/{partnershipType}/{membershipType}/{membershipId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
