# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyVendorDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_properties': 'ComponentsschemasDestinyDefinitionsDestinyVendorDisplayPropertiesDefinition',
        'buy_string': 'str',
        'sell_string': 'str',
        'display_item_hash': 'int',
        'inhibit_buying': 'bool',
        'inhibit_selling': 'bool',
        'faction_hash': 'int',
        'reset_interval_minutes': 'int',
        'reset_offset_minutes': 'int',
        'failure_strings': 'list[str]',
        'unlock_ranges': 'list[ComponentsschemasDatesDateRange]',
        'vendor_identifier': 'str',
        'vendor_portrait': 'str',
        'vendor_banner': 'str',
        'enabled': 'bool',
        'visible': 'bool',
        'vendor_category_identifier': 'str',
        'vendor_subcategory_identifier': 'str',
        'consolidate_categories': 'bool',
        'actions': 'list[ComponentsschemasDestinyDefinitionsDestinyVendorActionDefinition]',
        'categories': 'list[ComponentsschemasDestinyDefinitionsDestinyVendorCategoryEntryDefinition]',
        'original_categories': 'list[ComponentsschemasDestinyDefinitionsDestinyVendorCategoryEntryDefinition]',
        'display_categories': 'list[ComponentsschemasDestinyDefinitionsDestinyDisplayCategoryDefinition]',
        'interactions': 'list[ComponentsschemasDestinyDefinitionsDestinyVendorInteractionDefinition]',
        'inventory_flyouts': 'list[ComponentsschemasDestinyDefinitionsDestinyVendorInventoryFlyoutDefinition]',
        'item_list': 'list[ComponentsschemasDestinyDefinitionsDestinyVendorItemDefinition]',
        'services': 'list[ComponentsschemasDestinyDefinitionsDestinyVendorServiceDefinition]',
        'accepted_items': 'list[ComponentsschemasDestinyDefinitionsDestinyVendorAcceptedItemDefinition]',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'buy_string': 'buyString',
        'sell_string': 'sellString',
        'display_item_hash': 'displayItemHash',
        'inhibit_buying': 'inhibitBuying',
        'inhibit_selling': 'inhibitSelling',
        'faction_hash': 'factionHash',
        'reset_interval_minutes': 'resetIntervalMinutes',
        'reset_offset_minutes': 'resetOffsetMinutes',
        'failure_strings': 'failureStrings',
        'unlock_ranges': 'unlockRanges',
        'vendor_identifier': 'vendorIdentifier',
        'vendor_portrait': 'vendorPortrait',
        'vendor_banner': 'vendorBanner',
        'enabled': 'enabled',
        'visible': 'visible',
        'vendor_category_identifier': 'vendorCategoryIdentifier',
        'vendor_subcategory_identifier': 'vendorSubcategoryIdentifier',
        'consolidate_categories': 'consolidateCategories',
        'actions': 'actions',
        'categories': 'categories',
        'original_categories': 'originalCategories',
        'display_categories': 'displayCategories',
        'interactions': 'interactions',
        'inventory_flyouts': 'inventoryFlyouts',
        'item_list': 'itemList',
        'services': 'services',
        'accepted_items': 'acceptedItems',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, buy_string=None, sell_string=None, display_item_hash=None, inhibit_buying=None, inhibit_selling=None, faction_hash=None, reset_interval_minutes=None, reset_offset_minutes=None, failure_strings=None, unlock_ranges=None, vendor_identifier=None, vendor_portrait=None, vendor_banner=None, enabled=None, visible=None, vendor_category_identifier=None, vendor_subcategory_identifier=None, consolidate_categories=None, actions=None, categories=None, original_categories=None, display_categories=None, interactions=None, inventory_flyouts=None, item_list=None, services=None, accepted_items=None, hash=None, index=None, redacted=None):
        """
        DestinyDefinitionsDestinyVendorDefinition - a model defined in Swagger
        """

        self._display_properties = None
        self._buy_string = None
        self._sell_string = None
        self._display_item_hash = None
        self._inhibit_buying = None
        self._inhibit_selling = None
        self._faction_hash = None
        self._reset_interval_minutes = None
        self._reset_offset_minutes = None
        self._failure_strings = None
        self._unlock_ranges = None
        self._vendor_identifier = None
        self._vendor_portrait = None
        self._vendor_banner = None
        self._enabled = None
        self._visible = None
        self._vendor_category_identifier = None
        self._vendor_subcategory_identifier = None
        self._consolidate_categories = None
        self._actions = None
        self._categories = None
        self._original_categories = None
        self._display_categories = None
        self._interactions = None
        self._inventory_flyouts = None
        self._item_list = None
        self._services = None
        self._accepted_items = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
          self.display_properties = display_properties
        if buy_string is not None:
          self.buy_string = buy_string
        if sell_string is not None:
          self.sell_string = sell_string
        if display_item_hash is not None:
          self.display_item_hash = display_item_hash
        if inhibit_buying is not None:
          self.inhibit_buying = inhibit_buying
        if inhibit_selling is not None:
          self.inhibit_selling = inhibit_selling
        if faction_hash is not None:
          self.faction_hash = faction_hash
        if reset_interval_minutes is not None:
          self.reset_interval_minutes = reset_interval_minutes
        if reset_offset_minutes is not None:
          self.reset_offset_minutes = reset_offset_minutes
        if failure_strings is not None:
          self.failure_strings = failure_strings
        if unlock_ranges is not None:
          self.unlock_ranges = unlock_ranges
        if vendor_identifier is not None:
          self.vendor_identifier = vendor_identifier
        if vendor_portrait is not None:
          self.vendor_portrait = vendor_portrait
        if vendor_banner is not None:
          self.vendor_banner = vendor_banner
        if enabled is not None:
          self.enabled = enabled
        if visible is not None:
          self.visible = visible
        if vendor_category_identifier is not None:
          self.vendor_category_identifier = vendor_category_identifier
        if vendor_subcategory_identifier is not None:
          self.vendor_subcategory_identifier = vendor_subcategory_identifier
        if consolidate_categories is not None:
          self.consolidate_categories = consolidate_categories
        if actions is not None:
          self.actions = actions
        if categories is not None:
          self.categories = categories
        if original_categories is not None:
          self.original_categories = original_categories
        if display_categories is not None:
          self.display_categories = display_categories
        if interactions is not None:
          self.interactions = interactions
        if inventory_flyouts is not None:
          self.inventory_flyouts = inventory_flyouts
        if item_list is not None:
          self.item_list = item_list
        if services is not None:
          self.services = services
        if accepted_items is not None:
          self.accepted_items = accepted_items
        if hash is not None:
          self.hash = hash
        if index is not None:
          self.index = index
        if redacted is not None:
          self.redacted = redacted

    @property
    def display_properties(self):
        """
        Gets the display_properties of this DestinyDefinitionsDestinyVendorDefinition.

        :return: The display_properties of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: ComponentsschemasDestinyDefinitionsDestinyVendorDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """
        Sets the display_properties of this DestinyDefinitionsDestinyVendorDefinition.

        :param display_properties: The display_properties of this DestinyDefinitionsDestinyVendorDefinition.
        :type: ComponentsschemasDestinyDefinitionsDestinyVendorDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def buy_string(self):
        """
        Gets the buy_string of this DestinyDefinitionsDestinyVendorDefinition.
        If the vendor has a custom localized string describing the \"buy\" action, that isreturned here.

        :return: The buy_string of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._buy_string

    @buy_string.setter
    def buy_string(self, buy_string):
        """
        Sets the buy_string of this DestinyDefinitionsDestinyVendorDefinition.
        If the vendor has a custom localized string describing the \"buy\" action, that isreturned here.

        :param buy_string: The buy_string of this DestinyDefinitionsDestinyVendorDefinition.
        :type: str
        """

        self._buy_string = buy_string

    @property
    def sell_string(self):
        """
        Gets the sell_string of this DestinyDefinitionsDestinyVendorDefinition.
        Ditto for selling.  Not that you can sell items to a vendor anymore.  Will it come back?Who knows.  The string's still there.

        :return: The sell_string of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._sell_string

    @sell_string.setter
    def sell_string(self, sell_string):
        """
        Sets the sell_string of this DestinyDefinitionsDestinyVendorDefinition.
        Ditto for selling.  Not that you can sell items to a vendor anymore.  Will it come back?Who knows.  The string's still there.

        :param sell_string: The sell_string of this DestinyDefinitionsDestinyVendorDefinition.
        :type: str
        """

        self._sell_string = sell_string

    @property
    def display_item_hash(self):
        """
        Gets the display_item_hash of this DestinyDefinitionsDestinyVendorDefinition.
        If the vendor has an item that should be displayed as the \"featured\" item, this isthe hash identifier for that DestinyVendorItemDefinition.  Apparently this is usually a related currency, like a reputation token.  But it need not be restricted to that.

        :return: The display_item_hash of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._display_item_hash

    @display_item_hash.setter
    def display_item_hash(self, display_item_hash):
        """
        Sets the display_item_hash of this DestinyDefinitionsDestinyVendorDefinition.
        If the vendor has an item that should be displayed as the \"featured\" item, this isthe hash identifier for that DestinyVendorItemDefinition.  Apparently this is usually a related currency, like a reputation token.  But it need not be restricted to that.

        :param display_item_hash: The display_item_hash of this DestinyDefinitionsDestinyVendorDefinition.
        :type: int
        """

        self._display_item_hash = display_item_hash

    @property
    def inhibit_buying(self):
        """
        Gets the inhibit_buying of this DestinyDefinitionsDestinyVendorDefinition.
        If this is true, you aren't allowed to buy whatever the vendor is selling.

        :return: The inhibit_buying of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._inhibit_buying

    @inhibit_buying.setter
    def inhibit_buying(self, inhibit_buying):
        """
        Sets the inhibit_buying of this DestinyDefinitionsDestinyVendorDefinition.
        If this is true, you aren't allowed to buy whatever the vendor is selling.

        :param inhibit_buying: The inhibit_buying of this DestinyDefinitionsDestinyVendorDefinition.
        :type: bool
        """

        self._inhibit_buying = inhibit_buying

    @property
    def inhibit_selling(self):
        """
        Gets the inhibit_selling of this DestinyDefinitionsDestinyVendorDefinition.
        If this is true, you're not allowed to sell whatever the vendor is buying.

        :return: The inhibit_selling of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._inhibit_selling

    @inhibit_selling.setter
    def inhibit_selling(self, inhibit_selling):
        """
        Sets the inhibit_selling of this DestinyDefinitionsDestinyVendorDefinition.
        If this is true, you're not allowed to sell whatever the vendor is buying.

        :param inhibit_selling: The inhibit_selling of this DestinyDefinitionsDestinyVendorDefinition.
        :type: bool
        """

        self._inhibit_selling = inhibit_selling

    @property
    def faction_hash(self):
        """
        Gets the faction_hash of this DestinyDefinitionsDestinyVendorDefinition.
        If the Vendor has a faction, this hash will be valid and point to a DestinyFactionDefinition.  The game UI and BNet often mine the faction definition for additional elements and details to placeon the screen, such as the faction's Progression status (aka \"Reputation\").

        :return: The faction_hash of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._faction_hash

    @faction_hash.setter
    def faction_hash(self, faction_hash):
        """
        Sets the faction_hash of this DestinyDefinitionsDestinyVendorDefinition.
        If the Vendor has a faction, this hash will be valid and point to a DestinyFactionDefinition.  The game UI and BNet often mine the faction definition for additional elements and details to placeon the screen, such as the faction's Progression status (aka \"Reputation\").

        :param faction_hash: The faction_hash of this DestinyDefinitionsDestinyVendorDefinition.
        :type: int
        """

        self._faction_hash = faction_hash

    @property
    def reset_interval_minutes(self):
        """
        Gets the reset_interval_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        A number used for calculating the frequency of a vendor's inventory resetting/refreshing.  Don't worry about calculating this - we do it on the server side and send you the next refreshdate with the live data.

        :return: The reset_interval_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._reset_interval_minutes

    @reset_interval_minutes.setter
    def reset_interval_minutes(self, reset_interval_minutes):
        """
        Sets the reset_interval_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        A number used for calculating the frequency of a vendor's inventory resetting/refreshing.  Don't worry about calculating this - we do it on the server side and send you the next refreshdate with the live data.

        :param reset_interval_minutes: The reset_interval_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        :type: int
        """

        self._reset_interval_minutes = reset_interval_minutes

    @property
    def reset_offset_minutes(self):
        """
        Gets the reset_offset_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        Again, used for reset/refreshing of inventory.  Don't worry too much about it.  Unless you want to.

        :return: The reset_offset_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._reset_offset_minutes

    @reset_offset_minutes.setter
    def reset_offset_minutes(self, reset_offset_minutes):
        """
        Sets the reset_offset_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        Again, used for reset/refreshing of inventory.  Don't worry too much about it.  Unless you want to.

        :param reset_offset_minutes: The reset_offset_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        :type: int
        """

        self._reset_offset_minutes = reset_offset_minutes

    @property
    def failure_strings(self):
        """
        Gets the failure_strings of this DestinyDefinitionsDestinyVendorDefinition.
        If an item can't be purchased from the vendor, there may be many \"custom\"/game state specific reasons why not.  This is a list of localized strings with messages for those custom failures.  The live BNet data will return afailureIndexes property for items that can't be purchased: using those values to index into this array,you can show the user the appropriate failure message for the item that can't be bought.

        :return: The failure_strings of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[str]
        """
        return self._failure_strings

    @failure_strings.setter
    def failure_strings(self, failure_strings):
        """
        Sets the failure_strings of this DestinyDefinitionsDestinyVendorDefinition.
        If an item can't be purchased from the vendor, there may be many \"custom\"/game state specific reasons why not.  This is a list of localized strings with messages for those custom failures.  The live BNet data will return afailureIndexes property for items that can't be purchased: using those values to index into this array,you can show the user the appropriate failure message for the item that can't be bought.

        :param failure_strings: The failure_strings of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[str]
        """

        self._failure_strings = failure_strings

    @property
    def unlock_ranges(self):
        """
        Gets the unlock_ranges of this DestinyDefinitionsDestinyVendorDefinition.
        If we were able to predict the dates when this Vendor will be visible/available, this will be the listof those date ranges.  Sadly, we're not able to predict this very frequently, so this will often be useless data.

        :return: The unlock_ranges of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[ComponentsschemasDatesDateRange]
        """
        return self._unlock_ranges

    @unlock_ranges.setter
    def unlock_ranges(self, unlock_ranges):
        """
        Sets the unlock_ranges of this DestinyDefinitionsDestinyVendorDefinition.
        If we were able to predict the dates when this Vendor will be visible/available, this will be the listof those date ranges.  Sadly, we're not able to predict this very frequently, so this will often be useless data.

        :param unlock_ranges: The unlock_ranges of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[ComponentsschemasDatesDateRange]
        """

        self._unlock_ranges = unlock_ranges

    @property
    def vendor_identifier(self):
        """
        Gets the vendor_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        The internal identifier for the Vendor.  A holdover from the old days of Vendors, but we don't havetime to refactor it away.

        :return: The vendor_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._vendor_identifier

    @vendor_identifier.setter
    def vendor_identifier(self, vendor_identifier):
        """
        Sets the vendor_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        The internal identifier for the Vendor.  A holdover from the old days of Vendors, but we don't havetime to refactor it away.

        :param vendor_identifier: The vendor_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :type: str
        """

        self._vendor_identifier = vendor_identifier

    @property
    def vendor_portrait(self):
        """
        Gets the vendor_portrait of this DestinyDefinitionsDestinyVendorDefinition.
        A portrait of the Vendor's smiling mug.  Or frothing tentacles.

        :return: The vendor_portrait of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._vendor_portrait

    @vendor_portrait.setter
    def vendor_portrait(self, vendor_portrait):
        """
        Sets the vendor_portrait of this DestinyDefinitionsDestinyVendorDefinition.
        A portrait of the Vendor's smiling mug.  Or frothing tentacles.

        :param vendor_portrait: The vendor_portrait of this DestinyDefinitionsDestinyVendorDefinition.
        :type: str
        """

        self._vendor_portrait = vendor_portrait

    @property
    def vendor_banner(self):
        """
        Gets the vendor_banner of this DestinyDefinitionsDestinyVendorDefinition.
        If the vendor has a custom banner image, that can be found here.

        :return: The vendor_banner of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._vendor_banner

    @vendor_banner.setter
    def vendor_banner(self, vendor_banner):
        """
        Sets the vendor_banner of this DestinyDefinitionsDestinyVendorDefinition.
        If the vendor has a custom banner image, that can be found here.

        :param vendor_banner: The vendor_banner of this DestinyDefinitionsDestinyVendorDefinition.
        :type: str
        """

        self._vendor_banner = vendor_banner

    @property
    def enabled(self):
        """
        Gets the enabled of this DestinyDefinitionsDestinyVendorDefinition.
        If a vendor is not enabled, we won't even save the vendor's definition, and we won't return any items or info about them.It's as if they don't exist.

        :return: The enabled of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this DestinyDefinitionsDestinyVendorDefinition.
        If a vendor is not enabled, we won't even save the vendor's definition, and we won't return any items or info about them.It's as if they don't exist.

        :param enabled: The enabled of this DestinyDefinitionsDestinyVendorDefinition.
        :type: bool
        """

        self._enabled = enabled

    @property
    def visible(self):
        """
        Gets the visible of this DestinyDefinitionsDestinyVendorDefinition.
        If a vendor is not visible, we still have and will give vendor definition info, but we won't use themfor things like Advisors or UI.

        :return: The visible of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """
        Sets the visible of this DestinyDefinitionsDestinyVendorDefinition.
        If a vendor is not visible, we still have and will give vendor definition info, but we won't use themfor things like Advisors or UI.

        :param visible: The visible of this DestinyDefinitionsDestinyVendorDefinition.
        :type: bool
        """

        self._visible = visible

    @property
    def vendor_category_identifier(self):
        """
        Gets the vendor_category_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        The identifier of the VendorCategoryDefinition for this vendor.

        :return: The vendor_category_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._vendor_category_identifier

    @vendor_category_identifier.setter
    def vendor_category_identifier(self, vendor_category_identifier):
        """
        Sets the vendor_category_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        The identifier of the VendorCategoryDefinition for this vendor.

        :param vendor_category_identifier: The vendor_category_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :type: str
        """

        self._vendor_category_identifier = vendor_category_identifier

    @property
    def vendor_subcategory_identifier(self):
        """
        Gets the vendor_subcategory_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        The identifier of the VendorCategoryDefinition for this vendor's subcategory.

        :return: The vendor_subcategory_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._vendor_subcategory_identifier

    @vendor_subcategory_identifier.setter
    def vendor_subcategory_identifier(self, vendor_subcategory_identifier):
        """
        Sets the vendor_subcategory_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        The identifier of the VendorCategoryDefinition for this vendor's subcategory.

        :param vendor_subcategory_identifier: The vendor_subcategory_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :type: str
        """

        self._vendor_subcategory_identifier = vendor_subcategory_identifier

    @property
    def consolidate_categories(self):
        """
        Gets the consolidate_categories of this DestinyDefinitionsDestinyVendorDefinition.
        If TRUE, consolidate categories that only differ by trivial properties (such as having minor differences in name)

        :return: The consolidate_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._consolidate_categories

    @consolidate_categories.setter
    def consolidate_categories(self, consolidate_categories):
        """
        Sets the consolidate_categories of this DestinyDefinitionsDestinyVendorDefinition.
        If TRUE, consolidate categories that only differ by trivial properties (such as having minor differences in name)

        :param consolidate_categories: The consolidate_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :type: bool
        """

        self._consolidate_categories = consolidate_categories

    @property
    def actions(self):
        """
        Gets the actions of this DestinyDefinitionsDestinyVendorDefinition.
        Describes \"actions\" that can be performed on a vendor.  Currently, none of these exist.  But theoreticallya Vendor could let you interact with it by performing actions.  We'll see what these end up lookinglike if they ever get used.

        :return: The actions of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyVendorActionDefinition]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this DestinyDefinitionsDestinyVendorDefinition.
        Describes \"actions\" that can be performed on a vendor.  Currently, none of these exist.  But theoreticallya Vendor could let you interact with it by performing actions.  We'll see what these end up lookinglike if they ever get used.

        :param actions: The actions of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyVendorActionDefinition]
        """

        self._actions = actions

    @property
    def categories(self):
        """
        Gets the categories of this DestinyDefinitionsDestinyVendorDefinition.
        These are the headers for sections of items that the vendor is selling.When you see items organized by category in the header, it is these categoriesthat it is showing.  Well, technically not *exactly* these.  On BNet, it doesn't make sense to have categoriesbe \"paged\" as we do in Destiny, so we run some heuristics to attempt to aggregate pages ofcategories together.    These are the categories post-concatenation, if the vendor had concatenationapplied.  If you want the pre-aggregated category data, use originalCategories.

        :return: The categories of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyVendorCategoryEntryDefinition]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """
        Sets the categories of this DestinyDefinitionsDestinyVendorDefinition.
        These are the headers for sections of items that the vendor is selling.When you see items organized by category in the header, it is these categoriesthat it is showing.  Well, technically not *exactly* these.  On BNet, it doesn't make sense to have categoriesbe \"paged\" as we do in Destiny, so we run some heuristics to attempt to aggregate pages ofcategories together.    These are the categories post-concatenation, if the vendor had concatenationapplied.  If you want the pre-aggregated category data, use originalCategories.

        :param categories: The categories of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyVendorCategoryEntryDefinition]
        """

        self._categories = categories

    @property
    def original_categories(self):
        """
        Gets the original_categories of this DestinyDefinitionsDestinyVendorDefinition.
        See the categories property for a description of categories and why originalCategories exists.

        :return: The original_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyVendorCategoryEntryDefinition]
        """
        return self._original_categories

    @original_categories.setter
    def original_categories(self, original_categories):
        """
        Sets the original_categories of this DestinyDefinitionsDestinyVendorDefinition.
        See the categories property for a description of categories and why originalCategories exists.

        :param original_categories: The original_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyVendorCategoryEntryDefinition]
        """

        self._original_categories = original_categories

    @property
    def display_categories(self):
        """
        Gets the display_categories of this DestinyDefinitionsDestinyVendorDefinition.
        Display Categories are different from \"categories\" in that these are specifically for visual groupingand display of categories in Vendor UI.    The \"categories\" structure is for validation of the containeditems, and can be categorized entirely separately from \"Display Categories\", there need be and often will beno meaningful relationship between the two.

        :return: The display_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyDisplayCategoryDefinition]
        """
        return self._display_categories

    @display_categories.setter
    def display_categories(self, display_categories):
        """
        Sets the display_categories of this DestinyDefinitionsDestinyVendorDefinition.
        Display Categories are different from \"categories\" in that these are specifically for visual groupingand display of categories in Vendor UI.    The \"categories\" structure is for validation of the containeditems, and can be categorized entirely separately from \"Display Categories\", there need be and often will beno meaningful relationship between the two.

        :param display_categories: The display_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyDisplayCategoryDefinition]
        """

        self._display_categories = display_categories

    @property
    def interactions(self):
        """
        Gets the interactions of this DestinyDefinitionsDestinyVendorDefinition.
        In addition to selling items, vendors can have \"interactions\": UI where you \"talk\" with the vendorand they offer you a reward, some item, or merely acknowledge via dialog that you did something cool.

        :return: The interactions of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyVendorInteractionDefinition]
        """
        return self._interactions

    @interactions.setter
    def interactions(self, interactions):
        """
        Sets the interactions of this DestinyDefinitionsDestinyVendorDefinition.
        In addition to selling items, vendors can have \"interactions\": UI where you \"talk\" with the vendorand they offer you a reward, some item, or merely acknowledge via dialog that you did something cool.

        :param interactions: The interactions of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyVendorInteractionDefinition]
        """

        self._interactions = interactions

    @property
    def inventory_flyouts(self):
        """
        Gets the inventory_flyouts of this DestinyDefinitionsDestinyVendorDefinition.
        If the vendor shows you items from your own inventory - such as the Vault vendor does -this data describes the UI around showing those inventory buckets and which ones get shown.

        :return: The inventory_flyouts of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyVendorInventoryFlyoutDefinition]
        """
        return self._inventory_flyouts

    @inventory_flyouts.setter
    def inventory_flyouts(self, inventory_flyouts):
        """
        Sets the inventory_flyouts of this DestinyDefinitionsDestinyVendorDefinition.
        If the vendor shows you items from your own inventory - such as the Vault vendor does -this data describes the UI around showing those inventory buckets and which ones get shown.

        :param inventory_flyouts: The inventory_flyouts of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyVendorInventoryFlyoutDefinition]
        """

        self._inventory_flyouts = inventory_flyouts

    @property
    def item_list(self):
        """
        Gets the item_list of this DestinyDefinitionsDestinyVendorDefinition.
        If the vendor sells items (or merely has a list of items to show like the \"Sack\" vendors do),this is the list of those items that the vendor can sell.  From this list, only a subset will beavailable from the vendor at any given time, selected randomly and reset on the vendor's refresh interval.  Note that a vendor can sell the same item multiple ways: for instance, nothing stops a vendor from sellingyou some specific weapon but using two different currencies, or the same weapon at multiple \"item levels\".

        :return: The item_list of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyVendorItemDefinition]
        """
        return self._item_list

    @item_list.setter
    def item_list(self, item_list):
        """
        Sets the item_list of this DestinyDefinitionsDestinyVendorDefinition.
        If the vendor sells items (or merely has a list of items to show like the \"Sack\" vendors do),this is the list of those items that the vendor can sell.  From this list, only a subset will beavailable from the vendor at any given time, selected randomly and reset on the vendor's refresh interval.  Note that a vendor can sell the same item multiple ways: for instance, nothing stops a vendor from sellingyou some specific weapon but using two different currencies, or the same weapon at multiple \"item levels\".

        :param item_list: The item_list of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyVendorItemDefinition]
        """

        self._item_list = item_list

    @property
    def services(self):
        """
        Gets the services of this DestinyDefinitionsDestinyVendorDefinition.
        BNet doesn't use this data yet, but it appears to be an optional list of flavor textabout services that the Vendor can provide.

        :return: The services of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyVendorServiceDefinition]
        """
        return self._services

    @services.setter
    def services(self, services):
        """
        Sets the services of this DestinyDefinitionsDestinyVendorDefinition.
        BNet doesn't use this data yet, but it appears to be an optional list of flavor textabout services that the Vendor can provide.

        :param services: The services of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyVendorServiceDefinition]
        """

        self._services = services

    @property
    def accepted_items(self):
        """
        Gets the accepted_items of this DestinyDefinitionsDestinyVendorDefinition.
        If the Vendor is actually a vehicle for the transferring of items (like the Vault and Postmastervendors), this defines the list of source->destination buckets for transferring.

        :return: The accepted_items of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyVendorAcceptedItemDefinition]
        """
        return self._accepted_items

    @accepted_items.setter
    def accepted_items(self, accepted_items):
        """
        Sets the accepted_items of this DestinyDefinitionsDestinyVendorDefinition.
        If the Vendor is actually a vehicle for the transferring of items (like the Vault and Postmastervendors), this defines the list of source->destination buckets for transferring.

        :param accepted_items: The accepted_items of this DestinyDefinitionsDestinyVendorDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyVendorAcceptedItemDefinition]
        """

        self._accepted_items = accepted_items

    @property
    def hash(self):
        """
        Gets the hash of this DestinyDefinitionsDestinyVendorDefinition.
        The unique identifier for this entity.  Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this DestinyDefinitionsDestinyVendorDefinition.
        The unique identifier for this entity.  Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyVendorDefinition.
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """
        Gets the index of this DestinyDefinitionsDestinyVendorDefinition.
        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """
        Sets the index of this DestinyDefinitionsDestinyVendorDefinition.
        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyVendorDefinition.
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """
        Gets the redacted of this DestinyDefinitionsDestinyVendorDefinition.
        If this is true, then there is an entity with this identifier/type combination, but BNet isnot yet allowed to show it.  Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """
        Sets the redacted of this DestinyDefinitionsDestinyVendorDefinition.
        If this is true, then there is an entity with this identifier/type combination, but BNet isnot yet allowed to show it.  Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyVendorDefinition.
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyVendorDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
