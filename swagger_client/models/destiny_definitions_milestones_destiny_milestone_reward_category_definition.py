# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_hash': 'int',
        'category_identifier': 'str',
        'reward_entries': 'dict(str, ComponentsschemasDestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition)',
        'order': 'int'
    }

    attribute_map = {
        'category_hash': 'categoryHash',
        'category_identifier': 'categoryIdentifier',
        'reward_entries': 'rewardEntries',
        'order': 'order'
    }

    def __init__(self, category_hash=None, category_identifier=None, reward_entries=None, order=None):
        """
        DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition - a model defined in Swagger
        """

        self._category_hash = None
        self._category_identifier = None
        self._reward_entries = None
        self._order = None
        self.discriminator = None

        if category_hash is not None:
          self.category_hash = category_hash
        if category_identifier is not None:
          self.category_identifier = category_identifier
        if reward_entries is not None:
          self.reward_entries = reward_entries
        if order is not None:
          self.order = order

    @property
    def category_hash(self):
        """
        Gets the category_hash of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        Identifies the reward category.  Only guaranteed unique within this specific component!

        :return: The category_hash of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        :rtype: int
        """
        return self._category_hash

    @category_hash.setter
    def category_hash(self, category_hash):
        """
        Sets the category_hash of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        Identifies the reward category.  Only guaranteed unique within this specific component!

        :param category_hash: The category_hash of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        :type: int
        """

        self._category_hash = category_hash

    @property
    def category_identifier(self):
        """
        Gets the category_identifier of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        The string identifier for the category, if you want to use it for some end.  Guaranteed uniquewithin the specific component.

        :return: The category_identifier of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        :rtype: str
        """
        return self._category_identifier

    @category_identifier.setter
    def category_identifier(self, category_identifier):
        """
        Sets the category_identifier of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        The string identifier for the category, if you want to use it for some end.  Guaranteed uniquewithin the specific component.

        :param category_identifier: The category_identifier of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        :type: str
        """

        self._category_identifier = category_identifier

    @property
    def reward_entries(self):
        """
        Gets the reward_entries of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        If this milestone can provide rewards, this will define the setsof rewards that can be earned, the conditions under which they can be acquired,internal data that we'll use at runtime to determine whether you'vealready earned or redeemed this set of rewards,and the category that this reward should be placed under.

        :return: The reward_entries of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        :rtype: dict(str, ComponentsschemasDestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition)
        """
        return self._reward_entries

    @reward_entries.setter
    def reward_entries(self, reward_entries):
        """
        Sets the reward_entries of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        If this milestone can provide rewards, this will define the setsof rewards that can be earned, the conditions under which they can be acquired,internal data that we'll use at runtime to determine whether you'vealready earned or redeemed this set of rewards,and the category that this reward should be placed under.

        :param reward_entries: The reward_entries of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        :type: dict(str, ComponentsschemasDestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition)
        """

        self._reward_entries = reward_entries

    @property
    def order(self):
        """
        Gets the order of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        If you want to use BNet's recommended order for rendering categories programmatically,use this value and compare it to other categories to determine the order in whichthey should be rendered.  I don't feel great about putting this here, I won't lie.

        :return: The order of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        If you want to use BNet's recommended order for rendering categories programmatically,use this value and compare it to other categories to determine the order in whichthey should be rendered.  I don't feel great about putting this here, I won't lie.

        :param order: The order of this DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.
        :type: int
        """

        self._order = order

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
