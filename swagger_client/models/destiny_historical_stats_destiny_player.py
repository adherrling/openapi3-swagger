# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyHistoricalStatsDestinyPlayer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'character_class': 'str',
        'character_level': 'int',
        'light_level': 'int',
        'clan_name': 'str',
        'clan_tag': 'str'
    }

    attribute_map = {
        'character_class': 'characterClass',
        'character_level': 'characterLevel',
        'light_level': 'lightLevel',
        'clan_name': 'clanName',
        'clan_tag': 'clanTag'
    }

    def __init__(self, character_class=None, character_level=None, light_level=None, clan_name=None, clan_tag=None):
        """
        DestinyHistoricalStatsDestinyPlayer - a model defined in Swagger
        """

        self._character_class = None
        self._character_level = None
        self._light_level = None
        self._clan_name = None
        self._clan_tag = None
        self.discriminator = None

        if character_class is not None:
          self.character_class = character_class
        if character_level is not None:
          self.character_level = character_level
        if light_level is not None:
          self.light_level = light_level
        if clan_name is not None:
          self.clan_name = clan_name
        if clan_tag is not None:
          self.clan_tag = clan_tag

    @property
    def character_class(self):
        """
        Gets the character_class of this DestinyHistoricalStatsDestinyPlayer.
        Class of the character if applicable and available.

        :return: The character_class of this DestinyHistoricalStatsDestinyPlayer.
        :rtype: str
        """
        return self._character_class

    @character_class.setter
    def character_class(self, character_class):
        """
        Sets the character_class of this DestinyHistoricalStatsDestinyPlayer.
        Class of the character if applicable and available.

        :param character_class: The character_class of this DestinyHistoricalStatsDestinyPlayer.
        :type: str
        """

        self._character_class = character_class

    @property
    def character_level(self):
        """
        Gets the character_level of this DestinyHistoricalStatsDestinyPlayer.
        Level of the character if available. Zero if it is not available.

        :return: The character_level of this DestinyHistoricalStatsDestinyPlayer.
        :rtype: int
        """
        return self._character_level

    @character_level.setter
    def character_level(self, character_level):
        """
        Sets the character_level of this DestinyHistoricalStatsDestinyPlayer.
        Level of the character if available. Zero if it is not available.

        :param character_level: The character_level of this DestinyHistoricalStatsDestinyPlayer.
        :type: int
        """

        self._character_level = character_level

    @property
    def light_level(self):
        """
        Gets the light_level of this DestinyHistoricalStatsDestinyPlayer.
        Light Level of the character if available. Zero if it is not available.

        :return: The light_level of this DestinyHistoricalStatsDestinyPlayer.
        :rtype: int
        """
        return self._light_level

    @light_level.setter
    def light_level(self, light_level):
        """
        Sets the light_level of this DestinyHistoricalStatsDestinyPlayer.
        Light Level of the character if available. Zero if it is not available.

        :param light_level: The light_level of this DestinyHistoricalStatsDestinyPlayer.
        :type: int
        """

        self._light_level = light_level

    @property
    def clan_name(self):
        """
        Gets the clan_name of this DestinyHistoricalStatsDestinyPlayer.
        Current clan name for the player. This value may be null or an empty string if the user does not have a clan.

        :return: The clan_name of this DestinyHistoricalStatsDestinyPlayer.
        :rtype: str
        """
        return self._clan_name

    @clan_name.setter
    def clan_name(self, clan_name):
        """
        Sets the clan_name of this DestinyHistoricalStatsDestinyPlayer.
        Current clan name for the player. This value may be null or an empty string if the user does not have a clan.

        :param clan_name: The clan_name of this DestinyHistoricalStatsDestinyPlayer.
        :type: str
        """

        self._clan_name = clan_name

    @property
    def clan_tag(self):
        """
        Gets the clan_tag of this DestinyHistoricalStatsDestinyPlayer.
        Current clan tag for the player.  This value may be null or an empty string if the user does not have a clan.

        :return: The clan_tag of this DestinyHistoricalStatsDestinyPlayer.
        :rtype: str
        """
        return self._clan_tag

    @clan_tag.setter
    def clan_tag(self, clan_tag):
        """
        Sets the clan_tag of this DestinyHistoricalStatsDestinyPlayer.
        Current clan tag for the player.  This value may be null or an empty string if the user does not have a clan.

        :param clan_tag: The clan_tag of this DestinyHistoricalStatsDestinyPlayer.
        :type: str
        """

        self._clan_tag = clan_tag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyHistoricalStatsDestinyPlayer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
