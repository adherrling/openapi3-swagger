# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyEntitiesItemsDestinyItemInstanceComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'damage_type_hash': 'int',
        'item_level': 'int',
        'quality': 'int',
        'is_equipped': 'bool',
        'can_equip': 'bool',
        'equip_required_level': 'int',
        'unlock_hashes_required_to_equip': 'list[int]'
    }

    attribute_map = {
        'damage_type_hash': 'damageTypeHash',
        'item_level': 'itemLevel',
        'quality': 'quality',
        'is_equipped': 'isEquipped',
        'can_equip': 'canEquip',
        'equip_required_level': 'equipRequiredLevel',
        'unlock_hashes_required_to_equip': 'unlockHashesRequiredToEquip'
    }

    def __init__(self, damage_type_hash=None, item_level=None, quality=None, is_equipped=None, can_equip=None, equip_required_level=None, unlock_hashes_required_to_equip=None):
        """
        DestinyEntitiesItemsDestinyItemInstanceComponent - a model defined in Swagger
        """

        self._damage_type_hash = None
        self._item_level = None
        self._quality = None
        self._is_equipped = None
        self._can_equip = None
        self._equip_required_level = None
        self._unlock_hashes_required_to_equip = None
        self.discriminator = None

        if damage_type_hash is not None:
          self.damage_type_hash = damage_type_hash
        if item_level is not None:
          self.item_level = item_level
        if quality is not None:
          self.quality = quality
        if is_equipped is not None:
          self.is_equipped = is_equipped
        if can_equip is not None:
          self.can_equip = can_equip
        if equip_required_level is not None:
          self.equip_required_level = equip_required_level
        if unlock_hashes_required_to_equip is not None:
          self.unlock_hashes_required_to_equip = unlock_hashes_required_to_equip

    @property
    def damage_type_hash(self):
        """
        Gets the damage_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        The current damage type's hash, so you can look up localized info and icons for it.

        :return: The damage_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._damage_type_hash

    @damage_type_hash.setter
    def damage_type_hash(self, damage_type_hash):
        """
        Sets the damage_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        The current damage type's hash, so you can look up localized info and icons for it.

        :param damage_type_hash: The damage_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type: int
        """

        self._damage_type_hash = damage_type_hash

    @property
    def item_level(self):
        """
        Gets the item_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        The Item's \"Level\" has the most significant bearing on its stats, such as Light and Power.

        :return: The item_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._item_level

    @item_level.setter
    def item_level(self, item_level):
        """
        Sets the item_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        The Item's \"Level\" has the most significant bearing on its stats, such as Light and Power.

        :param item_level: The item_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type: int
        """

        self._item_level = item_level

    @property
    def quality(self):
        """
        Gets the quality of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        The \"Quality\" of the item has a lesser - but still impactful - bearing on stats like Light and Power.

        :return: The quality of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """
        Sets the quality of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        The \"Quality\" of the item has a lesser - but still impactful - bearing on stats like Light and Power.

        :param quality: The quality of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type: int
        """

        self._quality = quality

    @property
    def is_equipped(self):
        """
        Gets the is_equipped of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        Is the item currently equipped on the given character?

        :return: The is_equipped of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: bool
        """
        return self._is_equipped

    @is_equipped.setter
    def is_equipped(self, is_equipped):
        """
        Sets the is_equipped of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        Is the item currently equipped on the given character?

        :param is_equipped: The is_equipped of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type: bool
        """

        self._is_equipped = is_equipped

    @property
    def can_equip(self):
        """
        Gets the can_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        If this is an equippable item, you can check it here.  There are permanent as well as transitory reasonswhy an item might not be able to be equipped: check cannotEquipReason for details.

        :return: The can_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: bool
        """
        return self._can_equip

    @can_equip.setter
    def can_equip(self, can_equip):
        """
        Sets the can_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        If this is an equippable item, you can check it here.  There are permanent as well as transitory reasonswhy an item might not be able to be equipped: check cannotEquipReason for details.

        :param can_equip: The can_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type: bool
        """

        self._can_equip = can_equip

    @property
    def equip_required_level(self):
        """
        Gets the equip_required_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        If the item cannot be equipped until you reach a certain level, that level will be reflected here.

        :return: The equip_required_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._equip_required_level

    @equip_required_level.setter
    def equip_required_level(self, equip_required_level):
        """
        Sets the equip_required_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        If the item cannot be equipped until you reach a certain level, that level will be reflected here.

        :param equip_required_level: The equip_required_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type: int
        """

        self._equip_required_level = equip_required_level

    @property
    def unlock_hashes_required_to_equip(self):
        """
        Gets the unlock_hashes_required_to_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        Sometimes, there are limitations to equipping that are represented by character-level flags called \"unlocks\".  This is a list of flags that they need in order to equip the item that the character has not met.Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.

        :return: The unlock_hashes_required_to_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: list[int]
        """
        return self._unlock_hashes_required_to_equip

    @unlock_hashes_required_to_equip.setter
    def unlock_hashes_required_to_equip(self, unlock_hashes_required_to_equip):
        """
        Sets the unlock_hashes_required_to_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        Sometimes, there are limitations to equipping that are represented by character-level flags called \"unlocks\".  This is a list of flags that they need in order to equip the item that the character has not met.Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.

        :param unlock_hashes_required_to_equip: The unlock_hashes_required_to_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type: list[int]
        """

        self._unlock_hashes_required_to_equip = unlock_hashes_required_to_equip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyEntitiesItemsDestinyItemInstanceComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
