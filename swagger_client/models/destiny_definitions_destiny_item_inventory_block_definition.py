# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyItemInventoryBlockDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stack_unique_label': 'str',
        'max_stack_size': 'int',
        'bucket_type_hash': 'int',
        'recovery_bucket_type_hash': 'int',
        'tier_type_hash': 'int',
        'is_instance_item': 'bool',
        'tier_type_name': 'str'
    }

    attribute_map = {
        'stack_unique_label': 'stackUniqueLabel',
        'max_stack_size': 'maxStackSize',
        'bucket_type_hash': 'bucketTypeHash',
        'recovery_bucket_type_hash': 'recoveryBucketTypeHash',
        'tier_type_hash': 'tierTypeHash',
        'is_instance_item': 'isInstanceItem',
        'tier_type_name': 'tierTypeName'
    }

    def __init__(self, stack_unique_label=None, max_stack_size=None, bucket_type_hash=None, recovery_bucket_type_hash=None, tier_type_hash=None, is_instance_item=None, tier_type_name=None):
        """
        DestinyDefinitionsDestinyItemInventoryBlockDefinition - a model defined in Swagger
        """

        self._stack_unique_label = None
        self._max_stack_size = None
        self._bucket_type_hash = None
        self._recovery_bucket_type_hash = None
        self._tier_type_hash = None
        self._is_instance_item = None
        self._tier_type_name = None
        self.discriminator = None

        if stack_unique_label is not None:
          self.stack_unique_label = stack_unique_label
        if max_stack_size is not None:
          self.max_stack_size = max_stack_size
        if bucket_type_hash is not None:
          self.bucket_type_hash = bucket_type_hash
        if recovery_bucket_type_hash is not None:
          self.recovery_bucket_type_hash = recovery_bucket_type_hash
        if tier_type_hash is not None:
          self.tier_type_hash = tier_type_hash
        if is_instance_item is not None:
          self.is_instance_item = is_instance_item
        if tier_type_name is not None:
          self.tier_type_name = tier_type_name

    @property
    def stack_unique_label(self):
        """
        Gets the stack_unique_label of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        If this string is populated, you can't have more than one stack with this label in a given inventory.Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.

        :return: The stack_unique_label of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :rtype: str
        """
        return self._stack_unique_label

    @stack_unique_label.setter
    def stack_unique_label(self, stack_unique_label):
        """
        Sets the stack_unique_label of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        If this string is populated, you can't have more than one stack with this label in a given inventory.Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.

        :param stack_unique_label: The stack_unique_label of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :type: str
        """

        self._stack_unique_label = stack_unique_label

    @property
    def max_stack_size(self):
        """
        Gets the max_stack_size of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        The maximum quantity of this item that can exist in a stack.

        :return: The max_stack_size of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :rtype: int
        """
        return self._max_stack_size

    @max_stack_size.setter
    def max_stack_size(self, max_stack_size):
        """
        Sets the max_stack_size of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        The maximum quantity of this item that can exist in a stack.

        :param max_stack_size: The max_stack_size of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :type: int
        """

        self._max_stack_size = max_stack_size

    @property
    def bucket_type_hash(self):
        """
        Gets the bucket_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs.I should have named this \"bucketHash\", but too many things refer to it now.  Sigh.

        :return: The bucket_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :rtype: int
        """
        return self._bucket_type_hash

    @bucket_type_hash.setter
    def bucket_type_hash(self, bucket_type_hash):
        """
        Sets the bucket_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs.I should have named this \"bucketHash\", but too many things refer to it now.  Sigh.

        :param bucket_type_hash: The bucket_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :type: int
        """

        self._bucket_type_hash = bucket_type_hash

    @property
    def recovery_bucket_type_hash(self):
        """
        Gets the recovery_bucket_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        If the item is picked up by the lost loot queue, this is the hash identifierfor the DestinyInventoryBucketDefinition into which it will be placed.Again, I should have named this recoveryBucketHash instead.

        :return: The recovery_bucket_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :rtype: int
        """
        return self._recovery_bucket_type_hash

    @recovery_bucket_type_hash.setter
    def recovery_bucket_type_hash(self, recovery_bucket_type_hash):
        """
        Sets the recovery_bucket_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        If the item is picked up by the lost loot queue, this is the hash identifierfor the DestinyInventoryBucketDefinition into which it will be placed.Again, I should have named this recoveryBucketHash instead.

        :param recovery_bucket_type_hash: The recovery_bucket_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :type: int
        """

        self._recovery_bucket_type_hash = recovery_bucket_type_hash

    @property
    def tier_type_hash(self):
        """
        Gets the tier_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinitionif you need to show localized data for the item's tier.

        :return: The tier_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :rtype: int
        """
        return self._tier_type_hash

    @tier_type_hash.setter
    def tier_type_hash(self, tier_type_hash):
        """
        Sets the tier_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinitionif you need to show localized data for the item's tier.

        :param tier_type_hash: The tier_type_hash of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :type: int
        """

        self._tier_type_hash = tier_type_hash

    @property
    def is_instance_item(self):
        """
        Gets the is_instance_item of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        If TRUE, this item is instanced.  Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).

        :return: The is_instance_item of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :rtype: bool
        """
        return self._is_instance_item

    @is_instance_item.setter
    def is_instance_item(self, is_instance_item):
        """
        Sets the is_instance_item of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        If TRUE, this item is instanced.  Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).

        :param is_instance_item: The is_instance_item of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :type: bool
        """

        self._is_instance_item = is_instance_item

    @property
    def tier_type_name(self):
        """
        Gets the tier_type_name of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time.  However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.

        :return: The tier_type_name of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :rtype: str
        """
        return self._tier_type_name

    @tier_type_name.setter
    def tier_type_name(self, tier_type_name):
        """
        Sets the tier_type_name of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time.  However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.

        :param tier_type_name: The tier_type_name of this DestinyDefinitionsDestinyItemInventoryBlockDefinition.
        :type: str
        """

        self._tier_type_name = tier_type_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyItemInventoryBlockDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
