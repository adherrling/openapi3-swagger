# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyEntitiesCharactersDestinyCharacterComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'membership_id': 'int',
        'character_id': 'int',
        'date_last_played': 'datetime',
        'minutes_played_this_session': 'int',
        'minutes_played_total': 'int',
        'light': 'int',
        'stats': 'dict(str, int)',
        'race_hash': 'int',
        'gender_hash': 'int',
        'class_hash': 'int',
        'emblem_path': 'str',
        'emblem_background_path': 'str',
        'emblem_hash': 'int',
        'base_character_level': 'int',
        'percent_to_next_level': 'float'
    }

    attribute_map = {
        'membership_id': 'membershipId',
        'character_id': 'characterId',
        'date_last_played': 'dateLastPlayed',
        'minutes_played_this_session': 'minutesPlayedThisSession',
        'minutes_played_total': 'minutesPlayedTotal',
        'light': 'light',
        'stats': 'stats',
        'race_hash': 'raceHash',
        'gender_hash': 'genderHash',
        'class_hash': 'classHash',
        'emblem_path': 'emblemPath',
        'emblem_background_path': 'emblemBackgroundPath',
        'emblem_hash': 'emblemHash',
        'base_character_level': 'baseCharacterLevel',
        'percent_to_next_level': 'percentToNextLevel'
    }

    def __init__(self, membership_id=None, character_id=None, date_last_played=None, minutes_played_this_session=None, minutes_played_total=None, light=None, stats=None, race_hash=None, gender_hash=None, class_hash=None, emblem_path=None, emblem_background_path=None, emblem_hash=None, base_character_level=None, percent_to_next_level=None):
        """
        DestinyEntitiesCharactersDestinyCharacterComponent - a model defined in Swagger
        """

        self._membership_id = None
        self._character_id = None
        self._date_last_played = None
        self._minutes_played_this_session = None
        self._minutes_played_total = None
        self._light = None
        self._stats = None
        self._race_hash = None
        self._gender_hash = None
        self._class_hash = None
        self._emblem_path = None
        self._emblem_background_path = None
        self._emblem_hash = None
        self._base_character_level = None
        self._percent_to_next_level = None
        self.discriminator = None

        if membership_id is not None:
          self.membership_id = membership_id
        if character_id is not None:
          self.character_id = character_id
        if date_last_played is not None:
          self.date_last_played = date_last_played
        if minutes_played_this_session is not None:
          self.minutes_played_this_session = minutes_played_this_session
        if minutes_played_total is not None:
          self.minutes_played_total = minutes_played_total
        if light is not None:
          self.light = light
        if stats is not None:
          self.stats = stats
        if race_hash is not None:
          self.race_hash = race_hash
        if gender_hash is not None:
          self.gender_hash = gender_hash
        if class_hash is not None:
          self.class_hash = class_hash
        if emblem_path is not None:
          self.emblem_path = emblem_path
        if emblem_background_path is not None:
          self.emblem_background_path = emblem_background_path
        if emblem_hash is not None:
          self.emblem_hash = emblem_hash
        if base_character_level is not None:
          self.base_character_level = base_character_level
        if percent_to_next_level is not None:
          self.percent_to_next_level = percent_to_next_level

    @property
    def membership_id(self):
        """
        Gets the membership_id of this DestinyEntitiesCharactersDestinyCharacterComponent.
        Every Destiny Profile has a membershipId.  This is provided on the character as well for convenience.

        :return: The membership_id of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """
        Sets the membership_id of this DestinyEntitiesCharactersDestinyCharacterComponent.
        Every Destiny Profile has a membershipId.  This is provided on the character as well for convenience.

        :param membership_id: The membership_id of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: int
        """

        self._membership_id = membership_id

    @property
    def character_id(self):
        """
        Gets the character_id of this DestinyEntitiesCharactersDestinyCharacterComponent.
        The unique identifier for the character.

        :return: The character_id of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """
        Sets the character_id of this DestinyEntitiesCharactersDestinyCharacterComponent.
        The unique identifier for the character.

        :param character_id: The character_id of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: int
        """

        self._character_id = character_id

    @property
    def date_last_played(self):
        """
        Gets the date_last_played of this DestinyEntitiesCharactersDestinyCharacterComponent.
        The last date that the user played Destiny.

        :return: The date_last_played of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: datetime
        """
        return self._date_last_played

    @date_last_played.setter
    def date_last_played(self, date_last_played):
        """
        Sets the date_last_played of this DestinyEntitiesCharactersDestinyCharacterComponent.
        The last date that the user played Destiny.

        :param date_last_played: The date_last_played of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: datetime
        """

        self._date_last_played = date_last_played

    @property
    def minutes_played_this_session(self):
        """
        Gets the minutes_played_this_session of this DestinyEntitiesCharactersDestinyCharacterComponent.
        If the user is currently playing, this is how long they've been playing.

        :return: The minutes_played_this_session of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: int
        """
        return self._minutes_played_this_session

    @minutes_played_this_session.setter
    def minutes_played_this_session(self, minutes_played_this_session):
        """
        Sets the minutes_played_this_session of this DestinyEntitiesCharactersDestinyCharacterComponent.
        If the user is currently playing, this is how long they've been playing.

        :param minutes_played_this_session: The minutes_played_this_session of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: int
        """

        self._minutes_played_this_session = minutes_played_this_session

    @property
    def minutes_played_total(self):
        """
        Gets the minutes_played_total of this DestinyEntitiesCharactersDestinyCharacterComponent.
        If this value is 525,600, then they played Destiny for a year.  Or they're a very dedicated Rent fan.Note that this includes idle time, not just time spent actually in activities shooting things.

        :return: The minutes_played_total of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: int
        """
        return self._minutes_played_total

    @minutes_played_total.setter
    def minutes_played_total(self, minutes_played_total):
        """
        Sets the minutes_played_total of this DestinyEntitiesCharactersDestinyCharacterComponent.
        If this value is 525,600, then they played Destiny for a year.  Or they're a very dedicated Rent fan.Note that this includes idle time, not just time spent actually in activities shooting things.

        :param minutes_played_total: The minutes_played_total of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: int
        """

        self._minutes_played_total = minutes_played_total

    @property
    def light(self):
        """
        Gets the light of this DestinyEntitiesCharactersDestinyCharacterComponent.
        The user's calculated \"Light Level\".  Light level is an indicator of your power that mostly matters inthe end game, once you've reached the maximum character level: it's a level that's dependent on the averageAttack/Defense power of your items.

        :return: The light of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: int
        """
        return self._light

    @light.setter
    def light(self, light):
        """
        Sets the light of this DestinyEntitiesCharactersDestinyCharacterComponent.
        The user's calculated \"Light Level\".  Light level is an indicator of your power that mostly matters inthe end game, once you've reached the maximum character level: it's a level that's dependent on the averageAttack/Defense power of your items.

        :param light: The light of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: int
        """

        self._light = light

    @property
    def stats(self):
        """
        Gets the stats of this DestinyEntitiesCharactersDestinyCharacterComponent.
        Your character's stats, such as Agility, Resilience, etc... *not* historical stats.  You'll have to call a different endpoint for those.

        :return: The stats of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: dict(str, int)
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """
        Sets the stats of this DestinyEntitiesCharactersDestinyCharacterComponent.
        Your character's stats, such as Agility, Resilience, etc... *not* historical stats.  You'll have to call a different endpoint for those.

        :param stats: The stats of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: dict(str, int)
        """

        self._stats = stats

    @property
    def race_hash(self):
        """
        Gets the race_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        Use this hash to look up the character's DestinyRaceDefinition.

        :return: The race_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: int
        """
        return self._race_hash

    @race_hash.setter
    def race_hash(self, race_hash):
        """
        Sets the race_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        Use this hash to look up the character's DestinyRaceDefinition.

        :param race_hash: The race_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: int
        """

        self._race_hash = race_hash

    @property
    def gender_hash(self):
        """
        Gets the gender_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        Use this hash to look up the character's DestinyGenderDefinition.

        :return: The gender_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: int
        """
        return self._gender_hash

    @gender_hash.setter
    def gender_hash(self, gender_hash):
        """
        Sets the gender_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        Use this hash to look up the character's DestinyGenderDefinition.

        :param gender_hash: The gender_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: int
        """

        self._gender_hash = gender_hash

    @property
    def class_hash(self):
        """
        Gets the class_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        Use this hash to look up the character's DestinyClassDefinition.

        :return: The class_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: int
        """
        return self._class_hash

    @class_hash.setter
    def class_hash(self, class_hash):
        """
        Sets the class_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        Use this hash to look up the character's DestinyClassDefinition.

        :param class_hash: The class_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: int
        """

        self._class_hash = class_hash

    @property
    def emblem_path(self):
        """
        Gets the emblem_path of this DestinyEntitiesCharactersDestinyCharacterComponent.
        A shortcut path to the user's currently equipped emblem image.  If you're just showing summaryinfo for a user, this is more convenient than examining their equipped emblem and looking up the definition.

        :return: The emblem_path of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: str
        """
        return self._emblem_path

    @emblem_path.setter
    def emblem_path(self, emblem_path):
        """
        Sets the emblem_path of this DestinyEntitiesCharactersDestinyCharacterComponent.
        A shortcut path to the user's currently equipped emblem image.  If you're just showing summaryinfo for a user, this is more convenient than examining their equipped emblem and looking up the definition.

        :param emblem_path: The emblem_path of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: str
        """

        self._emblem_path = emblem_path

    @property
    def emblem_background_path(self):
        """
        Gets the emblem_background_path of this DestinyEntitiesCharactersDestinyCharacterComponent.
        A shortcut path to the user's currently equipped emblem background image.  If you're just showing summaryinfo for a user, this is more convenient than examining their equipped emblem and looking up the definition.

        :return: The emblem_background_path of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: str
        """
        return self._emblem_background_path

    @emblem_background_path.setter
    def emblem_background_path(self, emblem_background_path):
        """
        Sets the emblem_background_path of this DestinyEntitiesCharactersDestinyCharacterComponent.
        A shortcut path to the user's currently equipped emblem background image.  If you're just showing summaryinfo for a user, this is more convenient than examining their equipped emblem and looking up the definition.

        :param emblem_background_path: The emblem_background_path of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: str
        """

        self._emblem_background_path = emblem_background_path

    @property
    def emblem_hash(self):
        """
        Gets the emblem_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        The hash of the currently equipped emblem for the user.  Can be used to look up the DestinyInventoryItemDefinition.

        :return: The emblem_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: int
        """
        return self._emblem_hash

    @emblem_hash.setter
    def emblem_hash(self, emblem_hash):
        """
        Sets the emblem_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        The hash of the currently equipped emblem for the user.  Can be used to look up the DestinyInventoryItemDefinition.

        :param emblem_hash: The emblem_hash of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: int
        """

        self._emblem_hash = emblem_hash

    @property
    def base_character_level(self):
        """
        Gets the base_character_level of this DestinyEntitiesCharactersDestinyCharacterComponent.
        The \"base\" level of your character, not accounting for any light level.

        :return: The base_character_level of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: int
        """
        return self._base_character_level

    @base_character_level.setter
    def base_character_level(self, base_character_level):
        """
        Sets the base_character_level of this DestinyEntitiesCharactersDestinyCharacterComponent.
        The \"base\" level of your character, not accounting for any light level.

        :param base_character_level: The base_character_level of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: int
        """

        self._base_character_level = base_character_level

    @property
    def percent_to_next_level(self):
        """
        Gets the percent_to_next_level of this DestinyEntitiesCharactersDestinyCharacterComponent.
        A number between 0 and 100, indicating the whole and fractional % remaining to get tothe next character level.

        :return: The percent_to_next_level of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :rtype: float
        """
        return self._percent_to_next_level

    @percent_to_next_level.setter
    def percent_to_next_level(self, percent_to_next_level):
        """
        Sets the percent_to_next_level of this DestinyEntitiesCharactersDestinyCharacterComponent.
        A number between 0 and 100, indicating the whole and fractional % remaining to get tothe next character level.

        :param percent_to_next_level: The percent_to_next_level of this DestinyEntitiesCharactersDestinyCharacterComponent.
        :type: float
        """

        self._percent_to_next_level = percent_to_next_level

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyEntitiesCharactersDestinyCharacterComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
