# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyItemSocketEntryDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'socket_type_hash': 'int',
        'single_initial_item_hash': 'int',
        'reusable_plug_items': 'list[ComponentsschemasDestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition]'
    }

    attribute_map = {
        'socket_type_hash': 'socketTypeHash',
        'single_initial_item_hash': 'singleInitialItemHash',
        'reusable_plug_items': 'reusablePlugItems'
    }

    def __init__(self, socket_type_hash=None, single_initial_item_hash=None, reusable_plug_items=None):
        """
        DestinyDefinitionsDestinyItemSocketEntryDefinition - a model defined in Swagger
        """

        self._socket_type_hash = None
        self._single_initial_item_hash = None
        self._reusable_plug_items = None
        self.discriminator = None

        if socket_type_hash is not None:
          self.socket_type_hash = socket_type_hash
        if single_initial_item_hash is not None:
          self.single_initial_item_hash = single_initial_item_hash
        if reusable_plug_items is not None:
          self.reusable_plug_items = reusable_plug_items

    @property
    def socket_type_hash(self):
        """
        Gets the socket_type_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        All sockets have a type, and this is the hash identifier for this particular type.Use it to look up the DestinySocketTypeDefinition: read there for more information onhow socket types affect the behavior of the socket.

        :return: The socket_type_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: int
        """
        return self._socket_type_hash

    @socket_type_hash.setter
    def socket_type_hash(self, socket_type_hash):
        """
        Sets the socket_type_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        All sockets have a type, and this is the hash identifier for this particular type.Use it to look up the DestinySocketTypeDefinition: read there for more information onhow socket types affect the behavior of the socket.

        :param socket_type_hash: The socket_type_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type: int
        """

        self._socket_type_hash = socket_type_hash

    @property
    def single_initial_item_hash(self):
        """
        Gets the single_initial_item_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinitionrepresenting the Plug that will be initially inserted into the item on item creation.Otherwise, this Socket will either start without a plug inserted, or will have one randomlyinserted.

        :return: The single_initial_item_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: int
        """
        return self._single_initial_item_hash

    @single_initial_item_hash.setter
    def single_initial_item_hash(self, single_initial_item_hash):
        """
        Sets the single_initial_item_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinitionrepresenting the Plug that will be initially inserted into the item on item creation.Otherwise, this Socket will either start without a plug inserted, or will have one randomlyinserted.

        :param single_initial_item_hash: The single_initial_item_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type: int
        """

        self._single_initial_item_hash = single_initial_item_hash

    @property
    def reusable_plug_items(self):
        """
        Gets the reusable_plug_items of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        This is a list of pre-determined plugs that can *always* be plugged into this socket, withoutthe character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: youwill only be able to choose from one of these reusable plugs.

        :return: The reusable_plug_items of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition]
        """
        return self._reusable_plug_items

    @reusable_plug_items.setter
    def reusable_plug_items(self, reusable_plug_items):
        """
        Sets the reusable_plug_items of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        This is a list of pre-determined plugs that can *always* be plugged into this socket, withoutthe character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: youwill only be able to choose from one of these reusable plugs.

        :param reusable_plug_items: The reusable_plug_items of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition]
        """

        self._reusable_plug_items = reusable_plug_items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyItemSocketEntryDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
