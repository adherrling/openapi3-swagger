# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyComponentsItemsDestinyItemPlugComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'insert_fail_indexes': 'list[int]',
        'enable_fail_indexes': 'list[int]'
    }

    attribute_map = {
        'insert_fail_indexes': 'insertFailIndexes',
        'enable_fail_indexes': 'enableFailIndexes'
    }

    def __init__(self, insert_fail_indexes=None, enable_fail_indexes=None):
        """
        DestinyComponentsItemsDestinyItemPlugComponent - a model defined in Swagger
        """

        self._insert_fail_indexes = None
        self._enable_fail_indexes = None
        self.discriminator = None

        if insert_fail_indexes is not None:
          self.insert_fail_indexes = insert_fail_indexes
        if enable_fail_indexes is not None:
          self.enable_fail_indexes = enable_fail_indexes

    @property
    def insert_fail_indexes(self):
        """
        Gets the insert_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.

        :return: The insert_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        :rtype: list[int]
        """
        return self._insert_fail_indexes

    @insert_fail_indexes.setter
    def insert_fail_indexes(self, insert_fail_indexes):
        """
        Sets the insert_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.

        :param insert_fail_indexes: The insert_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        :type: list[int]
        """

        self._insert_fail_indexes = insert_fail_indexes

    @property
    def enable_fail_indexes(self):
        """
        Gets the enable_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.

        :return: The enable_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        :rtype: list[int]
        """
        return self._enable_fail_indexes

    @enable_fail_indexes.setter
    def enable_fail_indexes(self, enable_fail_indexes):
        """
        Sets the enable_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.

        :param enable_fail_indexes: The enable_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        :type: list[int]
        """

        self._enable_fail_indexes = enable_fail_indexes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyComponentsItemsDestinyItemPlugComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
