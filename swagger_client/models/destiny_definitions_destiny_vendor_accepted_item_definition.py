# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyVendorAcceptedItemDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accepted_inventory_bucket_hash': 'int',
        'destination_inventory_bucket_hash': 'int'
    }

    attribute_map = {
        'accepted_inventory_bucket_hash': 'acceptedInventoryBucketHash',
        'destination_inventory_bucket_hash': 'destinationInventoryBucketHash'
    }

    def __init__(self, accepted_inventory_bucket_hash=None, destination_inventory_bucket_hash=None):
        """
        DestinyDefinitionsDestinyVendorAcceptedItemDefinition - a model defined in Swagger
        """

        self._accepted_inventory_bucket_hash = None
        self._destination_inventory_bucket_hash = None
        self.discriminator = None

        if accepted_inventory_bucket_hash is not None:
          self.accepted_inventory_bucket_hash = accepted_inventory_bucket_hash
        if destination_inventory_bucket_hash is not None:
          self.destination_inventory_bucket_hash = destination_inventory_bucket_hash

    @property
    def accepted_inventory_bucket_hash(self):
        """
        Gets the accepted_inventory_bucket_hash of this DestinyDefinitionsDestinyVendorAcceptedItemDefinition.
        The \"source\" bucket for a transfer.  When a user wants to transfer an item, the appropriate DestinyVendorDefinition'sacceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matchesthe bucket that the item being transferred is currently located.  If it exists, the item will betransferred into whatever bucket is defined by destinationInventoryBucketHash.

        :return: The accepted_inventory_bucket_hash of this DestinyDefinitionsDestinyVendorAcceptedItemDefinition.
        :rtype: int
        """
        return self._accepted_inventory_bucket_hash

    @accepted_inventory_bucket_hash.setter
    def accepted_inventory_bucket_hash(self, accepted_inventory_bucket_hash):
        """
        Sets the accepted_inventory_bucket_hash of this DestinyDefinitionsDestinyVendorAcceptedItemDefinition.
        The \"source\" bucket for a transfer.  When a user wants to transfer an item, the appropriate DestinyVendorDefinition'sacceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matchesthe bucket that the item being transferred is currently located.  If it exists, the item will betransferred into whatever bucket is defined by destinationInventoryBucketHash.

        :param accepted_inventory_bucket_hash: The accepted_inventory_bucket_hash of this DestinyDefinitionsDestinyVendorAcceptedItemDefinition.
        :type: int
        """

        self._accepted_inventory_bucket_hash = accepted_inventory_bucket_hash

    @property
    def destination_inventory_bucket_hash(self):
        """
        Gets the destination_inventory_bucket_hash of this DestinyDefinitionsDestinyVendorAcceptedItemDefinition.
        This is the bucket where the item being transferred will be put, given that it was beingtransferred *from* the bucket defined in acceptedInventoryBucketHash.

        :return: The destination_inventory_bucket_hash of this DestinyDefinitionsDestinyVendorAcceptedItemDefinition.
        :rtype: int
        """
        return self._destination_inventory_bucket_hash

    @destination_inventory_bucket_hash.setter
    def destination_inventory_bucket_hash(self, destination_inventory_bucket_hash):
        """
        Sets the destination_inventory_bucket_hash of this DestinyDefinitionsDestinyVendorAcceptedItemDefinition.
        This is the bucket where the item being transferred will be put, given that it was beingtransferred *from* the bucket defined in acceptedInventoryBucketHash.

        :param destination_inventory_bucket_hash: The destination_inventory_bucket_hash of this DestinyDefinitionsDestinyVendorAcceptedItemDefinition.
        :type: int
        """

        self._destination_inventory_bucket_hash = destination_inventory_bucket_hash

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyVendorAcceptedItemDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
