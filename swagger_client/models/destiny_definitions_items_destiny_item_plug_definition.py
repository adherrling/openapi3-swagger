# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsItemsDestinyItemPlugDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'insertion_rules': 'list[ComponentsschemasDestinyDefinitionsItemsDestinyPlugRuleDefinition]',
        'plug_category_identifier': 'str',
        'plug_category_hash': 'int',
        'on_action_recreate_self': 'bool',
        'insertion_material_requirement_hash': 'int',
        'preview_item_override_hash': 'int',
        'enabled_material_requirement_hash': 'int',
        'enabled_rules': 'list[ComponentsschemasDestinyDefinitionsItemsDestinyPlugRuleDefinition]'
    }

    attribute_map = {
        'insertion_rules': 'insertionRules',
        'plug_category_identifier': 'plugCategoryIdentifier',
        'plug_category_hash': 'plugCategoryHash',
        'on_action_recreate_self': 'onActionRecreateSelf',
        'insertion_material_requirement_hash': 'insertionMaterialRequirementHash',
        'preview_item_override_hash': 'previewItemOverrideHash',
        'enabled_material_requirement_hash': 'enabledMaterialRequirementHash',
        'enabled_rules': 'enabledRules'
    }

    def __init__(self, insertion_rules=None, plug_category_identifier=None, plug_category_hash=None, on_action_recreate_self=None, insertion_material_requirement_hash=None, preview_item_override_hash=None, enabled_material_requirement_hash=None, enabled_rules=None):
        """
        DestinyDefinitionsItemsDestinyItemPlugDefinition - a model defined in Swagger
        """

        self._insertion_rules = None
        self._plug_category_identifier = None
        self._plug_category_hash = None
        self._on_action_recreate_self = None
        self._insertion_material_requirement_hash = None
        self._preview_item_override_hash = None
        self._enabled_material_requirement_hash = None
        self._enabled_rules = None
        self.discriminator = None

        if insertion_rules is not None:
          self.insertion_rules = insertion_rules
        if plug_category_identifier is not None:
          self.plug_category_identifier = plug_category_identifier
        if plug_category_hash is not None:
          self.plug_category_hash = plug_category_hash
        if on_action_recreate_self is not None:
          self.on_action_recreate_self = on_action_recreate_self
        if insertion_material_requirement_hash is not None:
          self.insertion_material_requirement_hash = insertion_material_requirement_hash
        if preview_item_override_hash is not None:
          self.preview_item_override_hash = preview_item_override_hash
        if enabled_material_requirement_hash is not None:
          self.enabled_material_requirement_hash = enabled_material_requirement_hash
        if enabled_rules is not None:
          self.enabled_rules = enabled_rules

    @property
    def insertion_rules(self):
        """
        Gets the insertion_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        The rules around when this plug can be inserted into a socket, asidefrom the socket's individual restrictions.  The live data DestinyItemPlugComponent.insertFailIndexes will be an index intothis array, so you can pull out the failure strings appropriate for the user.

        :return: The insertion_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsItemsDestinyPlugRuleDefinition]
        """
        return self._insertion_rules

    @insertion_rules.setter
    def insertion_rules(self, insertion_rules):
        """
        Sets the insertion_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        The rules around when this plug can be inserted into a socket, asidefrom the socket's individual restrictions.  The live data DestinyItemPlugComponent.insertFailIndexes will be an index intothis array, so you can pull out the failure strings appropriate for the user.

        :param insertion_rules: The insertion_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsItemsDestinyPlugRuleDefinition]
        """

        self._insertion_rules = insertion_rules

    @property
    def plug_category_identifier(self):
        """
        Gets the plug_category_identifier of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        The string identifier for the plug's category.  Use the socket's DestinySocketTypeDefinition.plugWhitelistto determine whether this plug can be inserted into the socket.

        :return: The plug_category_identifier of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: str
        """
        return self._plug_category_identifier

    @plug_category_identifier.setter
    def plug_category_identifier(self, plug_category_identifier):
        """
        Sets the plug_category_identifier of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        The string identifier for the plug's category.  Use the socket's DestinySocketTypeDefinition.plugWhitelistto determine whether this plug can be inserted into the socket.

        :param plug_category_identifier: The plug_category_identifier of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type: str
        """

        self._plug_category_identifier = plug_category_identifier

    @property
    def plug_category_hash(self):
        """
        Gets the plug_category_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        The hash for the plugCategoryIdentifier.  You can use this instead if you wish: I put both in the definitionfor debugging purposes.

        :return: The plug_category_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._plug_category_hash

    @plug_category_hash.setter
    def plug_category_hash(self, plug_category_hash):
        """
        Sets the plug_category_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        The hash for the plugCategoryIdentifier.  You can use this instead if you wish: I put both in the definitionfor debugging purposes.

        :param plug_category_hash: The plug_category_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type: int
        """

        self._plug_category_hash = plug_category_hash

    @property
    def on_action_recreate_self(self):
        """
        Gets the on_action_recreate_self of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        If you successfully socket the item, this will determine whether or not you get \"refunded\" on the plug.

        :return: The on_action_recreate_self of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: bool
        """
        return self._on_action_recreate_self

    @on_action_recreate_self.setter
    def on_action_recreate_self(self, on_action_recreate_self):
        """
        Sets the on_action_recreate_self of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        If you successfully socket the item, this will determine whether or not you get \"refunded\" on the plug.

        :param on_action_recreate_self: The on_action_recreate_self of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type: bool
        """

        self._on_action_recreate_self = on_action_recreate_self

    @property
    def insertion_material_requirement_hash(self):
        """
        Gets the insertion_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        If inserting this plug requires materials, this is the hash identifier for looking up theDestinyMaterialRequirementSetDefinition for those requirements.

        :return: The insertion_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._insertion_material_requirement_hash

    @insertion_material_requirement_hash.setter
    def insertion_material_requirement_hash(self, insertion_material_requirement_hash):
        """
        Sets the insertion_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        If inserting this plug requires materials, this is the hash identifier for looking up theDestinyMaterialRequirementSetDefinition for those requirements.

        :param insertion_material_requirement_hash: The insertion_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type: int
        """

        self._insertion_material_requirement_hash = insertion_material_requirement_hash

    @property
    def preview_item_override_hash(self):
        """
        Gets the preview_item_override_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        In the game, if you're inspecting a plug item directly, this will be the item shownwith the plug attached.  Look up the DestinyInventoryItemDefinition for this hash for the item.

        :return: The preview_item_override_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._preview_item_override_hash

    @preview_item_override_hash.setter
    def preview_item_override_hash(self, preview_item_override_hash):
        """
        Sets the preview_item_override_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        In the game, if you're inspecting a plug item directly, this will be the item shownwith the plug attached.  Look up the DestinyInventoryItemDefinition for this hash for the item.

        :param preview_item_override_hash: The preview_item_override_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type: int
        """

        self._preview_item_override_hash = preview_item_override_hash

    @property
    def enabled_material_requirement_hash(self):
        """
        Gets the enabled_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        It's not enough for the plug to be inserted.  It has to be enabled as well.For it to be enabled, it may require materials.This is the hash identifier for the DestinyMaterialRequirementSetDefinition for those requirements,if there is one.

        :return: The enabled_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._enabled_material_requirement_hash

    @enabled_material_requirement_hash.setter
    def enabled_material_requirement_hash(self, enabled_material_requirement_hash):
        """
        Sets the enabled_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        It's not enough for the plug to be inserted.  It has to be enabled as well.For it to be enabled, it may require materials.This is the hash identifier for the DestinyMaterialRequirementSetDefinition for those requirements,if there is one.

        :param enabled_material_requirement_hash: The enabled_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type: int
        """

        self._enabled_material_requirement_hash = enabled_material_requirement_hash

    @property
    def enabled_rules(self):
        """
        Gets the enabled_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        The rules around whether the plug, once inserted, is enabled and providing its benefits.  The live data DestinyItemPlugComponent.enableFailIndexes will be an index intothis array, so you can pull out the failure strings appropriate for the user.

        :return: The enabled_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsItemsDestinyPlugRuleDefinition]
        """
        return self._enabled_rules

    @enabled_rules.setter
    def enabled_rules(self, enabled_rules):
        """
        Sets the enabled_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        The rules around whether the plug, once inserted, is enabled and providing its benefits.  The live data DestinyItemPlugComponent.enableFailIndexes will be an index intothis array, so you can pull out the failure strings appropriate for the user.

        :param enabled_rules: The enabled_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsItemsDestinyPlugRuleDefinition]
        """

        self._enabled_rules = enabled_rules

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsItemsDestinyItemPlugDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
