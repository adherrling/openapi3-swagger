# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyHistoricalStatsDestinyHistoricalStatsByPeriod(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_time': 'dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)',
        'all_time_tier1': 'dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)',
        'all_time_tier2': 'dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)',
        'all_time_tier3': 'dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)',
        'daily': 'list[ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup]',
        'monthly': 'list[ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup]'
    }

    attribute_map = {
        'all_time': 'allTime',
        'all_time_tier1': 'allTimeTier1',
        'all_time_tier2': 'allTimeTier2',
        'all_time_tier3': 'allTimeTier3',
        'daily': 'daily',
        'monthly': 'monthly'
    }

    def __init__(self, all_time=None, all_time_tier1=None, all_time_tier2=None, all_time_tier3=None, daily=None, monthly=None):
        """
        DestinyHistoricalStatsDestinyHistoricalStatsByPeriod - a model defined in Swagger
        """

        self._all_time = None
        self._all_time_tier1 = None
        self._all_time_tier2 = None
        self._all_time_tier3 = None
        self._daily = None
        self._monthly = None
        self.discriminator = None

        if all_time is not None:
          self.all_time = all_time
        if all_time_tier1 is not None:
          self.all_time_tier1 = all_time_tier1
        if all_time_tier2 is not None:
          self.all_time_tier2 = all_time_tier2
        if all_time_tier3 is not None:
          self.all_time_tier3 = all_time_tier3
        if daily is not None:
          self.daily = daily
        if monthly is not None:
          self.monthly = monthly

    @property
    def all_time(self):
        """
        Gets the all_time of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :return: The all_time of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :rtype: dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)
        """
        return self._all_time

    @all_time.setter
    def all_time(self, all_time):
        """
        Sets the all_time of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :param all_time: The all_time of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :type: dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)
        """

        self._all_time = all_time

    @property
    def all_time_tier1(self):
        """
        Gets the all_time_tier1 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :return: The all_time_tier1 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :rtype: dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)
        """
        return self._all_time_tier1

    @all_time_tier1.setter
    def all_time_tier1(self, all_time_tier1):
        """
        Sets the all_time_tier1 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :param all_time_tier1: The all_time_tier1 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :type: dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)
        """

        self._all_time_tier1 = all_time_tier1

    @property
    def all_time_tier2(self):
        """
        Gets the all_time_tier2 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :return: The all_time_tier2 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :rtype: dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)
        """
        return self._all_time_tier2

    @all_time_tier2.setter
    def all_time_tier2(self, all_time_tier2):
        """
        Sets the all_time_tier2 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :param all_time_tier2: The all_time_tier2 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :type: dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)
        """

        self._all_time_tier2 = all_time_tier2

    @property
    def all_time_tier3(self):
        """
        Gets the all_time_tier3 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :return: The all_time_tier3 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :rtype: dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)
        """
        return self._all_time_tier3

    @all_time_tier3.setter
    def all_time_tier3(self, all_time_tier3):
        """
        Sets the all_time_tier3 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :param all_time_tier3: The all_time_tier3 of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :type: dict(str, ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsValue)
        """

        self._all_time_tier3 = all_time_tier3

    @property
    def daily(self):
        """
        Gets the daily of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :return: The daily of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :rtype: list[ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup]
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """
        Sets the daily of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :param daily: The daily of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :type: list[ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup]
        """

        self._daily = daily

    @property
    def monthly(self):
        """
        Gets the monthly of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :return: The monthly of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :rtype: list[ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup]
        """
        return self._monthly

    @monthly.setter
    def monthly(self, monthly):
        """
        Sets the monthly of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.

        :param monthly: The monthly of this DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.
        :type: list[ComponentsschemasDestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup]
        """

        self._monthly = monthly

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyHistoricalStatsDestinyHistoricalStatsByPeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
