# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GroupsV2GroupFeatures(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maximum_members': 'int',
        'maximum_memberships_of_group_type': 'int',
        'capabilities': 'ComponentsschemasGroupsV2Capabilities',
        'membership_types': 'list[ComponentsschemasBungieMembershipType]',
        'invite_permission_override': 'bool',
        'update_culture_permission_override': 'bool',
        'update_banner_permission_override': 'bool'
    }

    attribute_map = {
        'maximum_members': 'maximumMembers',
        'maximum_memberships_of_group_type': 'maximumMembershipsOfGroupType',
        'capabilities': 'capabilities',
        'membership_types': 'membershipTypes',
        'invite_permission_override': 'invitePermissionOverride',
        'update_culture_permission_override': 'updateCulturePermissionOverride',
        'update_banner_permission_override': 'updateBannerPermissionOverride'
    }

    def __init__(self, maximum_members=None, maximum_memberships_of_group_type=None, capabilities=None, membership_types=None, invite_permission_override=None, update_culture_permission_override=None, update_banner_permission_override=None):
        """
        GroupsV2GroupFeatures - a model defined in Swagger
        """

        self._maximum_members = None
        self._maximum_memberships_of_group_type = None
        self._capabilities = None
        self._membership_types = None
        self._invite_permission_override = None
        self._update_culture_permission_override = None
        self._update_banner_permission_override = None
        self.discriminator = None

        if maximum_members is not None:
          self.maximum_members = maximum_members
        if maximum_memberships_of_group_type is not None:
          self.maximum_memberships_of_group_type = maximum_memberships_of_group_type
        if capabilities is not None:
          self.capabilities = capabilities
        if membership_types is not None:
          self.membership_types = membership_types
        if invite_permission_override is not None:
          self.invite_permission_override = invite_permission_override
        if update_culture_permission_override is not None:
          self.update_culture_permission_override = update_culture_permission_override
        if update_banner_permission_override is not None:
          self.update_banner_permission_override = update_banner_permission_override

    @property
    def maximum_members(self):
        """
        Gets the maximum_members of this GroupsV2GroupFeatures.

        :return: The maximum_members of this GroupsV2GroupFeatures.
        :rtype: int
        """
        return self._maximum_members

    @maximum_members.setter
    def maximum_members(self, maximum_members):
        """
        Sets the maximum_members of this GroupsV2GroupFeatures.

        :param maximum_members: The maximum_members of this GroupsV2GroupFeatures.
        :type: int
        """

        self._maximum_members = maximum_members

    @property
    def maximum_memberships_of_group_type(self):
        """
        Gets the maximum_memberships_of_group_type of this GroupsV2GroupFeatures.
        Maximum number of groups of this type a typical membership may join. For example,a user may join about 50 General groups with their Bungie.net account.  They mayjoin one clan per Destiny membership.

        :return: The maximum_memberships_of_group_type of this GroupsV2GroupFeatures.
        :rtype: int
        """
        return self._maximum_memberships_of_group_type

    @maximum_memberships_of_group_type.setter
    def maximum_memberships_of_group_type(self, maximum_memberships_of_group_type):
        """
        Sets the maximum_memberships_of_group_type of this GroupsV2GroupFeatures.
        Maximum number of groups of this type a typical membership may join. For example,a user may join about 50 General groups with their Bungie.net account.  They mayjoin one clan per Destiny membership.

        :param maximum_memberships_of_group_type: The maximum_memberships_of_group_type of this GroupsV2GroupFeatures.
        :type: int
        """

        self._maximum_memberships_of_group_type = maximum_memberships_of_group_type

    @property
    def capabilities(self):
        """
        Gets the capabilities of this GroupsV2GroupFeatures.

        :return: The capabilities of this GroupsV2GroupFeatures.
        :rtype: ComponentsschemasGroupsV2Capabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """
        Sets the capabilities of this GroupsV2GroupFeatures.

        :param capabilities: The capabilities of this GroupsV2GroupFeatures.
        :type: ComponentsschemasGroupsV2Capabilities
        """

        self._capabilities = capabilities

    @property
    def membership_types(self):
        """
        Gets the membership_types of this GroupsV2GroupFeatures.

        :return: The membership_types of this GroupsV2GroupFeatures.
        :rtype: list[ComponentsschemasBungieMembershipType]
        """
        return self._membership_types

    @membership_types.setter
    def membership_types(self, membership_types):
        """
        Sets the membership_types of this GroupsV2GroupFeatures.

        :param membership_types: The membership_types of this GroupsV2GroupFeatures.
        :type: list[ComponentsschemasBungieMembershipType]
        """

        self._membership_types = membership_types

    @property
    def invite_permission_override(self):
        """
        Gets the invite_permission_override of this GroupsV2GroupFeatures.
        Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :return: The invite_permission_override of this GroupsV2GroupFeatures.
        :rtype: bool
        """
        return self._invite_permission_override

    @invite_permission_override.setter
    def invite_permission_override(self, invite_permission_override):
        """
        Sets the invite_permission_override of this GroupsV2GroupFeatures.
        Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :param invite_permission_override: The invite_permission_override of this GroupsV2GroupFeatures.
        :type: bool
        """

        self._invite_permission_override = invite_permission_override

    @property
    def update_culture_permission_override(self):
        """
        Gets the update_culture_permission_override of this GroupsV2GroupFeatures.
        Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :return: The update_culture_permission_override of this GroupsV2GroupFeatures.
        :rtype: bool
        """
        return self._update_culture_permission_override

    @update_culture_permission_override.setter
    def update_culture_permission_override(self, update_culture_permission_override):
        """
        Sets the update_culture_permission_override of this GroupsV2GroupFeatures.
        Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :param update_culture_permission_override: The update_culture_permission_override of this GroupsV2GroupFeatures.
        :type: bool
        """

        self._update_culture_permission_override = update_culture_permission_override

    @property
    def update_banner_permission_override(self):
        """
        Gets the update_banner_permission_override of this GroupsV2GroupFeatures.
        Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :return: The update_banner_permission_override of this GroupsV2GroupFeatures.
        :rtype: bool
        """
        return self._update_banner_permission_override

    @update_banner_permission_override.setter
    def update_banner_permission_override(self, update_banner_permission_override):
        """
        Sets the update_banner_permission_override of this GroupsV2GroupFeatures.
        Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :param update_banner_permission_override: The update_banner_permission_override of this GroupsV2GroupFeatures.
        :type: bool
        """

        self._update_banner_permission_override = update_banner_permission_override

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GroupsV2GroupFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
