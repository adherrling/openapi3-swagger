# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyItemSackBlockDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'detail_action': 'str',
        'open_action': 'str',
        'select_item_count': 'int',
        'vendor_sack_type': 'str'
    }

    attribute_map = {
        'detail_action': 'detailAction',
        'open_action': 'openAction',
        'select_item_count': 'selectItemCount',
        'vendor_sack_type': 'vendorSackType'
    }

    def __init__(self, detail_action=None, open_action=None, select_item_count=None, vendor_sack_type=None):
        """
        DestinyDefinitionsDestinyItemSackBlockDefinition - a model defined in Swagger
        """

        self._detail_action = None
        self._open_action = None
        self._select_item_count = None
        self._vendor_sack_type = None
        self.discriminator = None

        if detail_action is not None:
          self.detail_action = detail_action
        if open_action is not None:
          self.open_action = open_action
        if select_item_count is not None:
          self.select_item_count = select_item_count
        if vendor_sack_type is not None:
          self.vendor_sack_type = vendor_sack_type

    @property
    def detail_action(self):
        """
        Gets the detail_action of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        A description of what will happen when you open the sack.As far as I can tell, this is blank currently.  Unknown whether it willeventually be populated with useful info.

        :return: The detail_action of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        :rtype: str
        """
        return self._detail_action

    @detail_action.setter
    def detail_action(self, detail_action):
        """
        Sets the detail_action of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        A description of what will happen when you open the sack.As far as I can tell, this is blank currently.  Unknown whether it willeventually be populated with useful info.

        :param detail_action: The detail_action of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        :type: str
        """

        self._detail_action = detail_action

    @property
    def open_action(self):
        """
        Gets the open_action of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        The localized name of the action being performed when you open the sack.

        :return: The open_action of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        :rtype: str
        """
        return self._open_action

    @open_action.setter
    def open_action(self, open_action):
        """
        Sets the open_action of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        The localized name of the action being performed when you open the sack.

        :param open_action: The open_action of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        :type: str
        """

        self._open_action = open_action

    @property
    def select_item_count(self):
        """
        Gets the select_item_count of this DestinyDefinitionsDestinyItemSackBlockDefinition.

        :return: The select_item_count of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        :rtype: int
        """
        return self._select_item_count

    @select_item_count.setter
    def select_item_count(self, select_item_count):
        """
        Sets the select_item_count of this DestinyDefinitionsDestinyItemSackBlockDefinition.

        :param select_item_count: The select_item_count of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        :type: int
        """

        self._select_item_count = select_item_count

    @property
    def vendor_sack_type(self):
        """
        Gets the vendor_sack_type of this DestinyDefinitionsDestinyItemSackBlockDefinition.

        :return: The vendor_sack_type of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        :rtype: str
        """
        return self._vendor_sack_type

    @vendor_sack_type.setter
    def vendor_sack_type(self, vendor_sack_type):
        """
        Sets the vendor_sack_type of this DestinyDefinitionsDestinyItemSackBlockDefinition.

        :param vendor_sack_type: The vendor_sack_type of this DestinyDefinitionsDestinyItemSackBlockDefinition.
        :type: str
        """

        self._vendor_sack_type = vendor_sack_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyItemSackBlockDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
