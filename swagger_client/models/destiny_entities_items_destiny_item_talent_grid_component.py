# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyEntitiesItemsDestinyItemTalentGridComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'talent_grid_hash': 'int',
        'nodes': 'list[ComponentsschemasDestinyDestinyTalentNode]',
        'is_grid_complete': 'bool'
    }

    attribute_map = {
        'talent_grid_hash': 'talentGridHash',
        'nodes': 'nodes',
        'is_grid_complete': 'isGridComplete'
    }

    def __init__(self, talent_grid_hash=None, nodes=None, is_grid_complete=None):
        """
        DestinyEntitiesItemsDestinyItemTalentGridComponent - a model defined in Swagger
        """

        self._talent_grid_hash = None
        self._nodes = None
        self._is_grid_complete = None
        self.discriminator = None

        if talent_grid_hash is not None:
          self.talent_grid_hash = talent_grid_hash
        if nodes is not None:
          self.nodes = nodes
        if is_grid_complete is not None:
          self.is_grid_complete = is_grid_complete

    @property
    def talent_grid_hash(self):
        """
        Gets the talent_grid_hash of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        Most items don't have useful talent grids anymore, but Builds in particular still do.  You can use this hash to lookup the DestinyTalentGridDefinition attached to this item,which will be crucial for understanding the node values on the item.

        :return: The talent_grid_hash of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :rtype: int
        """
        return self._talent_grid_hash

    @talent_grid_hash.setter
    def talent_grid_hash(self, talent_grid_hash):
        """
        Sets the talent_grid_hash of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        Most items don't have useful talent grids anymore, but Builds in particular still do.  You can use this hash to lookup the DestinyTalentGridDefinition attached to this item,which will be crucial for understanding the node values on the item.

        :param talent_grid_hash: The talent_grid_hash of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :type: int
        """

        self._talent_grid_hash = talent_grid_hash

    @property
    def nodes(self):
        """
        Gets the nodes of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        Detailed information about the individual nodes in the talent grid.  A node represents a single visual \"pip\" in the talent grid or Build detail view,though each node may have multiple \"steps\" which indicate the actual bonusesand visual representation of that node.

        :return: The nodes of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :rtype: list[ComponentsschemasDestinyDestinyTalentNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """
        Sets the nodes of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        Detailed information about the individual nodes in the talent grid.  A node represents a single visual \"pip\" in the talent grid or Build detail view,though each node may have multiple \"steps\" which indicate the actual bonusesand visual representation of that node.

        :param nodes: The nodes of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :type: list[ComponentsschemasDestinyDestinyTalentNode]
        """

        self._nodes = nodes

    @property
    def is_grid_complete(self):
        """
        Gets the is_grid_complete of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.  Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive sethas an activated node, and every non-exclusive set node has been activated)

        :return: The is_grid_complete of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :rtype: bool
        """
        return self._is_grid_complete

    @is_grid_complete.setter
    def is_grid_complete(self, is_grid_complete):
        """
        Sets the is_grid_complete of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.  Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive sethas an activated node, and every non-exclusive set node has been activated)

        :param is_grid_complete: The is_grid_complete of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :type: bool
        """

        self._is_grid_complete = is_grid_complete

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyEntitiesItemsDestinyItemTalentGridComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
