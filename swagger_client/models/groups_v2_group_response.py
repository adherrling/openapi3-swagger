# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GroupsV2GroupResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'detail': 'ComponentsschemasGroupsV2GroupV2',
        'founder': 'ComponentsschemasGroupsV2GroupMember',
        'allied_ids': 'list[int]',
        'parent_group': 'ComponentsschemasGroupsV2GroupV2',
        'alliance_status': 'ComponentsschemasGroupsV2GroupAllianceStatus',
        'group_join_invite_count': 'int',
        'current_user_member_map': 'dict(str, ComponentsschemasGroupsV2GroupMember)',
        'current_user_potential_member_map': 'dict(str, ComponentsschemasGroupsV2GroupPotentialMember)'
    }

    attribute_map = {
        'detail': 'detail',
        'founder': 'founder',
        'allied_ids': 'alliedIds',
        'parent_group': 'parentGroup',
        'alliance_status': 'allianceStatus',
        'group_join_invite_count': 'groupJoinInviteCount',
        'current_user_member_map': 'currentUserMemberMap',
        'current_user_potential_member_map': 'currentUserPotentialMemberMap'
    }

    def __init__(self, detail=None, founder=None, allied_ids=None, parent_group=None, alliance_status=None, group_join_invite_count=None, current_user_member_map=None, current_user_potential_member_map=None):
        """
        GroupsV2GroupResponse - a model defined in Swagger
        """

        self._detail = None
        self._founder = None
        self._allied_ids = None
        self._parent_group = None
        self._alliance_status = None
        self._group_join_invite_count = None
        self._current_user_member_map = None
        self._current_user_potential_member_map = None
        self.discriminator = None

        if detail is not None:
          self.detail = detail
        if founder is not None:
          self.founder = founder
        if allied_ids is not None:
          self.allied_ids = allied_ids
        if parent_group is not None:
          self.parent_group = parent_group
        if alliance_status is not None:
          self.alliance_status = alliance_status
        if group_join_invite_count is not None:
          self.group_join_invite_count = group_join_invite_count
        if current_user_member_map is not None:
          self.current_user_member_map = current_user_member_map
        if current_user_potential_member_map is not None:
          self.current_user_potential_member_map = current_user_potential_member_map

    @property
    def detail(self):
        """
        Gets the detail of this GroupsV2GroupResponse.

        :return: The detail of this GroupsV2GroupResponse.
        :rtype: ComponentsschemasGroupsV2GroupV2
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """
        Sets the detail of this GroupsV2GroupResponse.

        :param detail: The detail of this GroupsV2GroupResponse.
        :type: ComponentsschemasGroupsV2GroupV2
        """

        self._detail = detail

    @property
    def founder(self):
        """
        Gets the founder of this GroupsV2GroupResponse.

        :return: The founder of this GroupsV2GroupResponse.
        :rtype: ComponentsschemasGroupsV2GroupMember
        """
        return self._founder

    @founder.setter
    def founder(self, founder):
        """
        Sets the founder of this GroupsV2GroupResponse.

        :param founder: The founder of this GroupsV2GroupResponse.
        :type: ComponentsschemasGroupsV2GroupMember
        """

        self._founder = founder

    @property
    def allied_ids(self):
        """
        Gets the allied_ids of this GroupsV2GroupResponse.

        :return: The allied_ids of this GroupsV2GroupResponse.
        :rtype: list[int]
        """
        return self._allied_ids

    @allied_ids.setter
    def allied_ids(self, allied_ids):
        """
        Sets the allied_ids of this GroupsV2GroupResponse.

        :param allied_ids: The allied_ids of this GroupsV2GroupResponse.
        :type: list[int]
        """

        self._allied_ids = allied_ids

    @property
    def parent_group(self):
        """
        Gets the parent_group of this GroupsV2GroupResponse.

        :return: The parent_group of this GroupsV2GroupResponse.
        :rtype: ComponentsschemasGroupsV2GroupV2
        """
        return self._parent_group

    @parent_group.setter
    def parent_group(self, parent_group):
        """
        Sets the parent_group of this GroupsV2GroupResponse.

        :param parent_group: The parent_group of this GroupsV2GroupResponse.
        :type: ComponentsschemasGroupsV2GroupV2
        """

        self._parent_group = parent_group

    @property
    def alliance_status(self):
        """
        Gets the alliance_status of this GroupsV2GroupResponse.

        :return: The alliance_status of this GroupsV2GroupResponse.
        :rtype: ComponentsschemasGroupsV2GroupAllianceStatus
        """
        return self._alliance_status

    @alliance_status.setter
    def alliance_status(self, alliance_status):
        """
        Sets the alliance_status of this GroupsV2GroupResponse.

        :param alliance_status: The alliance_status of this GroupsV2GroupResponse.
        :type: ComponentsschemasGroupsV2GroupAllianceStatus
        """

        self._alliance_status = alliance_status

    @property
    def group_join_invite_count(self):
        """
        Gets the group_join_invite_count of this GroupsV2GroupResponse.

        :return: The group_join_invite_count of this GroupsV2GroupResponse.
        :rtype: int
        """
        return self._group_join_invite_count

    @group_join_invite_count.setter
    def group_join_invite_count(self, group_join_invite_count):
        """
        Sets the group_join_invite_count of this GroupsV2GroupResponse.

        :param group_join_invite_count: The group_join_invite_count of this GroupsV2GroupResponse.
        :type: int
        """

        self._group_join_invite_count = group_join_invite_count

    @property
    def current_user_member_map(self):
        """
        Gets the current_user_member_map of this GroupsV2GroupResponse.
        This property will be populated if the authenticated user is a member of the group. Note that because ofaccount linking, a user can sometimes be part of a clan more than once.  As such, this returns thehighest member type available.

        :return: The current_user_member_map of this GroupsV2GroupResponse.
        :rtype: dict(str, ComponentsschemasGroupsV2GroupMember)
        """
        return self._current_user_member_map

    @current_user_member_map.setter
    def current_user_member_map(self, current_user_member_map):
        """
        Sets the current_user_member_map of this GroupsV2GroupResponse.
        This property will be populated if the authenticated user is a member of the group. Note that because ofaccount linking, a user can sometimes be part of a clan more than once.  As such, this returns thehighest member type available.

        :param current_user_member_map: The current_user_member_map of this GroupsV2GroupResponse.
        :type: dict(str, ComponentsschemasGroupsV2GroupMember)
        """

        self._current_user_member_map = current_user_member_map

    @property
    def current_user_potential_member_map(self):
        """
        Gets the current_user_potential_member_map of this GroupsV2GroupResponse.
        This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join.Note that because of account linking, a user can sometimes be part of a clan more than once.

        :return: The current_user_potential_member_map of this GroupsV2GroupResponse.
        :rtype: dict(str, ComponentsschemasGroupsV2GroupPotentialMember)
        """
        return self._current_user_potential_member_map

    @current_user_potential_member_map.setter
    def current_user_potential_member_map(self, current_user_potential_member_map):
        """
        Sets the current_user_potential_member_map of this GroupsV2GroupResponse.
        This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join.Note that because of account linking, a user can sometimes be part of a clan more than once.

        :param current_user_potential_member_map: The current_user_potential_member_map of this GroupsV2GroupResponse.
        :type: dict(str, ComponentsschemasGroupsV2GroupPotentialMember)
        """

        self._current_user_potential_member_map = current_user_potential_member_map

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GroupsV2GroupResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
