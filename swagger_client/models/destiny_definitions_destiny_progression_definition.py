# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyProgressionDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_properties': 'ComponentsschemasDestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition',
        'repeat_last_step': 'bool',
        'source': 'str',
        'steps': 'list[ComponentsschemasDestinyDefinitionsDestinyProgressionStepDefinition]',
        'visible': 'bool',
        'faction_hash': 'int',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'repeat_last_step': 'repeatLastStep',
        'source': 'source',
        'steps': 'steps',
        'visible': 'visible',
        'faction_hash': 'factionHash',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, repeat_last_step=None, source=None, steps=None, visible=None, faction_hash=None, hash=None, index=None, redacted=None):
        """
        DestinyDefinitionsDestinyProgressionDefinition - a model defined in Swagger
        """

        self._display_properties = None
        self._repeat_last_step = None
        self._source = None
        self._steps = None
        self._visible = None
        self._faction_hash = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
          self.display_properties = display_properties
        if repeat_last_step is not None:
          self.repeat_last_step = repeat_last_step
        if source is not None:
          self.source = source
        if steps is not None:
          self.steps = steps
        if visible is not None:
          self.visible = visible
        if faction_hash is not None:
          self.faction_hash = faction_hash
        if hash is not None:
          self.hash = hash
        if index is not None:
          self.index = index
        if redacted is not None:
          self.redacted = redacted

    @property
    def display_properties(self):
        """
        Gets the display_properties of this DestinyDefinitionsDestinyProgressionDefinition.

        :return: The display_properties of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: ComponentsschemasDestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """
        Sets the display_properties of this DestinyDefinitionsDestinyProgressionDefinition.

        :param display_properties: The display_properties of this DestinyDefinitionsDestinyProgressionDefinition.
        :type: ComponentsschemasDestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def repeat_last_step(self):
        """
        Gets the repeat_last_step of this DestinyDefinitionsDestinyProgressionDefinition.
        If this is True, then the progression doesn't have a maximum level.

        :return: The repeat_last_step of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: bool
        """
        return self._repeat_last_step

    @repeat_last_step.setter
    def repeat_last_step(self, repeat_last_step):
        """
        Sets the repeat_last_step of this DestinyDefinitionsDestinyProgressionDefinition.
        If this is True, then the progression doesn't have a maximum level.

        :param repeat_last_step: The repeat_last_step of this DestinyDefinitionsDestinyProgressionDefinition.
        :type: bool
        """

        self._repeat_last_step = repeat_last_step

    @property
    def source(self):
        """
        Gets the source of this DestinyDefinitionsDestinyProgressionDefinition.
        If there's a description of how to earn this progression in the local config, this willbe that localized description.

        :return: The source of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this DestinyDefinitionsDestinyProgressionDefinition.
        If there's a description of how to earn this progression in the local config, this willbe that localized description.

        :param source: The source of this DestinyDefinitionsDestinyProgressionDefinition.
        :type: str
        """

        self._source = source

    @property
    def steps(self):
        """
        Gets the steps of this DestinyDefinitionsDestinyProgressionDefinition.
        Progressions are divided into Steps, which roughly equate to \"Levels\" in the traditionalsense of a Progression.  Notably, the last step can be repeated indefinitely if repeatLastStepis true, meaning that the calculation for your level is not as simple as comparing your currentprogress to the max progress of the steps.    These and more calculations are done for you ifyou grab live character progression data, such as in the DestinyCharacterProgressionComponent.

        :return: The steps of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyProgressionStepDefinition]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """
        Sets the steps of this DestinyDefinitionsDestinyProgressionDefinition.
        Progressions are divided into Steps, which roughly equate to \"Levels\" in the traditionalsense of a Progression.  Notably, the last step can be repeated indefinitely if repeatLastStepis true, meaning that the calculation for your level is not as simple as comparing your currentprogress to the max progress of the steps.    These and more calculations are done for you ifyou grab live character progression data, such as in the DestinyCharacterProgressionComponent.

        :param steps: The steps of this DestinyDefinitionsDestinyProgressionDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyProgressionStepDefinition]
        """

        self._steps = steps

    @property
    def visible(self):
        """
        Gets the visible of this DestinyDefinitionsDestinyProgressionDefinition.
        If true, the Progression is something worth showing to users.  If false, BNet isn't going to show it.  But that doesn't mean you can't.  We're all friends here.

        :return: The visible of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """
        Sets the visible of this DestinyDefinitionsDestinyProgressionDefinition.
        If true, the Progression is something worth showing to users.  If false, BNet isn't going to show it.  But that doesn't mean you can't.  We're all friends here.

        :param visible: The visible of this DestinyDefinitionsDestinyProgressionDefinition.
        :type: bool
        """

        self._visible = visible

    @property
    def faction_hash(self):
        """
        Gets the faction_hash of this DestinyDefinitionsDestinyProgressionDefinition.
        If the value exists, this is the hash identifier for the Faction that owns this Progression.  This is purely for convenience, if you're looking at a progression and want to know if and whoit's related to in terms of Faction Reputation.

        :return: The faction_hash of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: int
        """
        return self._faction_hash

    @faction_hash.setter
    def faction_hash(self, faction_hash):
        """
        Sets the faction_hash of this DestinyDefinitionsDestinyProgressionDefinition.
        If the value exists, this is the hash identifier for the Faction that owns this Progression.  This is purely for convenience, if you're looking at a progression and want to know if and whoit's related to in terms of Faction Reputation.

        :param faction_hash: The faction_hash of this DestinyDefinitionsDestinyProgressionDefinition.
        :type: int
        """

        self._faction_hash = faction_hash

    @property
    def hash(self):
        """
        Gets the hash of this DestinyDefinitionsDestinyProgressionDefinition.
        The unique identifier for this entity.  Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this DestinyDefinitionsDestinyProgressionDefinition.
        The unique identifier for this entity.  Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyProgressionDefinition.
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """
        Gets the index of this DestinyDefinitionsDestinyProgressionDefinition.
        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """
        Sets the index of this DestinyDefinitionsDestinyProgressionDefinition.
        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyProgressionDefinition.
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """
        Gets the redacted of this DestinyDefinitionsDestinyProgressionDefinition.
        If this is true, then there is an entity with this identifier/type combination, but BNet isnot yet allowed to show it.  Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """
        Sets the redacted of this DestinyDefinitionsDestinyProgressionDefinition.
        If this is true, then there is an entity with this identifier/type combination, but BNet isnot yet allowed to show it.  Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyProgressionDefinition.
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyProgressionDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
