# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyConfigDestinyManifest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'mobile_asset_content_path': 'str',
        'mobile_gear_asset_data_bases': 'list[ComponentsschemasDestinyConfigGearAssetDataBaseDefinition]',
        'mobile_world_content_paths': 'dict(str, str)',
        'mobile_clan_banner_database_path': 'str',
        'mobile_gear_cdn': 'dict(str, str)'
    }

    attribute_map = {
        'version': 'version',
        'mobile_asset_content_path': 'mobileAssetContentPath',
        'mobile_gear_asset_data_bases': 'mobileGearAssetDataBases',
        'mobile_world_content_paths': 'mobileWorldContentPaths',
        'mobile_clan_banner_database_path': 'mobileClanBannerDatabasePath',
        'mobile_gear_cdn': 'mobileGearCDN'
    }

    def __init__(self, version=None, mobile_asset_content_path=None, mobile_gear_asset_data_bases=None, mobile_world_content_paths=None, mobile_clan_banner_database_path=None, mobile_gear_cdn=None):
        """
        DestinyConfigDestinyManifest - a model defined in Swagger
        """

        self._version = None
        self._mobile_asset_content_path = None
        self._mobile_gear_asset_data_bases = None
        self._mobile_world_content_paths = None
        self._mobile_clan_banner_database_path = None
        self._mobile_gear_cdn = None
        self.discriminator = None

        if version is not None:
          self.version = version
        if mobile_asset_content_path is not None:
          self.mobile_asset_content_path = mobile_asset_content_path
        if mobile_gear_asset_data_bases is not None:
          self.mobile_gear_asset_data_bases = mobile_gear_asset_data_bases
        if mobile_world_content_paths is not None:
          self.mobile_world_content_paths = mobile_world_content_paths
        if mobile_clan_banner_database_path is not None:
          self.mobile_clan_banner_database_path = mobile_clan_banner_database_path
        if mobile_gear_cdn is not None:
          self.mobile_gear_cdn = mobile_gear_cdn

    @property
    def version(self):
        """
        Gets the version of this DestinyConfigDestinyManifest.

        :return: The version of this DestinyConfigDestinyManifest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this DestinyConfigDestinyManifest.

        :param version: The version of this DestinyConfigDestinyManifest.
        :type: str
        """

        self._version = version

    @property
    def mobile_asset_content_path(self):
        """
        Gets the mobile_asset_content_path of this DestinyConfigDestinyManifest.

        :return: The mobile_asset_content_path of this DestinyConfigDestinyManifest.
        :rtype: str
        """
        return self._mobile_asset_content_path

    @mobile_asset_content_path.setter
    def mobile_asset_content_path(self, mobile_asset_content_path):
        """
        Sets the mobile_asset_content_path of this DestinyConfigDestinyManifest.

        :param mobile_asset_content_path: The mobile_asset_content_path of this DestinyConfigDestinyManifest.
        :type: str
        """

        self._mobile_asset_content_path = mobile_asset_content_path

    @property
    def mobile_gear_asset_data_bases(self):
        """
        Gets the mobile_gear_asset_data_bases of this DestinyConfigDestinyManifest.

        :return: The mobile_gear_asset_data_bases of this DestinyConfigDestinyManifest.
        :rtype: list[ComponentsschemasDestinyConfigGearAssetDataBaseDefinition]
        """
        return self._mobile_gear_asset_data_bases

    @mobile_gear_asset_data_bases.setter
    def mobile_gear_asset_data_bases(self, mobile_gear_asset_data_bases):
        """
        Sets the mobile_gear_asset_data_bases of this DestinyConfigDestinyManifest.

        :param mobile_gear_asset_data_bases: The mobile_gear_asset_data_bases of this DestinyConfigDestinyManifest.
        :type: list[ComponentsschemasDestinyConfigGearAssetDataBaseDefinition]
        """

        self._mobile_gear_asset_data_bases = mobile_gear_asset_data_bases

    @property
    def mobile_world_content_paths(self):
        """
        Gets the mobile_world_content_paths of this DestinyConfigDestinyManifest.

        :return: The mobile_world_content_paths of this DestinyConfigDestinyManifest.
        :rtype: dict(str, str)
        """
        return self._mobile_world_content_paths

    @mobile_world_content_paths.setter
    def mobile_world_content_paths(self, mobile_world_content_paths):
        """
        Sets the mobile_world_content_paths of this DestinyConfigDestinyManifest.

        :param mobile_world_content_paths: The mobile_world_content_paths of this DestinyConfigDestinyManifest.
        :type: dict(str, str)
        """

        self._mobile_world_content_paths = mobile_world_content_paths

    @property
    def mobile_clan_banner_database_path(self):
        """
        Gets the mobile_clan_banner_database_path of this DestinyConfigDestinyManifest.

        :return: The mobile_clan_banner_database_path of this DestinyConfigDestinyManifest.
        :rtype: str
        """
        return self._mobile_clan_banner_database_path

    @mobile_clan_banner_database_path.setter
    def mobile_clan_banner_database_path(self, mobile_clan_banner_database_path):
        """
        Sets the mobile_clan_banner_database_path of this DestinyConfigDestinyManifest.

        :param mobile_clan_banner_database_path: The mobile_clan_banner_database_path of this DestinyConfigDestinyManifest.
        :type: str
        """

        self._mobile_clan_banner_database_path = mobile_clan_banner_database_path

    @property
    def mobile_gear_cdn(self):
        """
        Gets the mobile_gear_cdn of this DestinyConfigDestinyManifest.

        :return: The mobile_gear_cdn of this DestinyConfigDestinyManifest.
        :rtype: dict(str, str)
        """
        return self._mobile_gear_cdn

    @mobile_gear_cdn.setter
    def mobile_gear_cdn(self, mobile_gear_cdn):
        """
        Sets the mobile_gear_cdn of this DestinyConfigDestinyManifest.

        :param mobile_gear_cdn: The mobile_gear_cdn of this DestinyConfigDestinyManifest.
        :type: dict(str, str)
        """

        self._mobile_gear_cdn = mobile_gear_cdn

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyConfigDestinyManifest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
