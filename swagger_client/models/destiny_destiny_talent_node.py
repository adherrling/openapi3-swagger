# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDestinyTalentNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_index': 'int',
        'node_hash': 'int',
        'is_activated': 'bool',
        'step_index': 'int',
        'materials_to_upgrade': 'list[ComponentsschemasDestinyDefinitionsDestinyMaterialRequirement]',
        'activation_grid_level': 'int',
        'progress_percent': 'float',
        'hidden': 'bool'
    }

    attribute_map = {
        'node_index': 'nodeIndex',
        'node_hash': 'nodeHash',
        'is_activated': 'isActivated',
        'step_index': 'stepIndex',
        'materials_to_upgrade': 'materialsToUpgrade',
        'activation_grid_level': 'activationGridLevel',
        'progress_percent': 'progressPercent',
        'hidden': 'hidden'
    }

    def __init__(self, node_index=None, node_hash=None, is_activated=None, step_index=None, materials_to_upgrade=None, activation_grid_level=None, progress_percent=None, hidden=None):
        """
        DestinyDestinyTalentNode - a model defined in Swagger
        """

        self._node_index = None
        self._node_hash = None
        self._is_activated = None
        self._step_index = None
        self._materials_to_upgrade = None
        self._activation_grid_level = None
        self._progress_percent = None
        self._hidden = None
        self.discriminator = None

        if node_index is not None:
          self.node_index = node_index
        if node_hash is not None:
          self.node_hash = node_hash
        if is_activated is not None:
          self.is_activated = is_activated
        if step_index is not None:
          self.step_index = step_index
        if materials_to_upgrade is not None:
          self.materials_to_upgrade = materials_to_upgrade
        if activation_grid_level is not None:
          self.activation_grid_level = activation_grid_level
        if progress_percent is not None:
          self.progress_percent = progress_percent
        if hidden is not None:
          self.hidden = hidden

    @property
    def node_index(self):
        """
        Gets the node_index of this DestinyDestinyTalentNode.
        The index of the Talent Node being referred to (an index into DestinyTalentGridDefinition.nodes[]).CONTENT VERSION DEPENDENT.

        :return: The node_index of this DestinyDestinyTalentNode.
        :rtype: int
        """
        return self._node_index

    @node_index.setter
    def node_index(self, node_index):
        """
        Sets the node_index of this DestinyDestinyTalentNode.
        The index of the Talent Node being referred to (an index into DestinyTalentGridDefinition.nodes[]).CONTENT VERSION DEPENDENT.

        :param node_index: The node_index of this DestinyDestinyTalentNode.
        :type: int
        """

        self._node_index = node_index

    @property
    def node_hash(self):
        """
        Gets the node_hash of this DestinyDestinyTalentNode.
        The hash of the Talent Node being referred to (in DestinyTalentGridDefinition.nodes).Deceptively CONTENT VERSION DEPENDENT.  We have no guarantee of the hash's immutability between content versions.

        :return: The node_hash of this DestinyDestinyTalentNode.
        :rtype: int
        """
        return self._node_hash

    @node_hash.setter
    def node_hash(self, node_hash):
        """
        Sets the node_hash of this DestinyDestinyTalentNode.
        The hash of the Talent Node being referred to (in DestinyTalentGridDefinition.nodes).Deceptively CONTENT VERSION DEPENDENT.  We have no guarantee of the hash's immutability between content versions.

        :param node_hash: The node_hash of this DestinyDestinyTalentNode.
        :type: int
        """

        self._node_hash = node_hash

    @property
    def is_activated(self):
        """
        Gets the is_activated of this DestinyDestinyTalentNode.
        If true, the node is activated: it's current step then provides its benefits.

        :return: The is_activated of this DestinyDestinyTalentNode.
        :rtype: bool
        """
        return self._is_activated

    @is_activated.setter
    def is_activated(self, is_activated):
        """
        Sets the is_activated of this DestinyDestinyTalentNode.
        If true, the node is activated: it's current step then provides its benefits.

        :param is_activated: The is_activated of this DestinyDestinyTalentNode.
        :type: bool
        """

        self._is_activated = is_activated

    @property
    def step_index(self):
        """
        Gets the step_index of this DestinyDestinyTalentNode.
        The currently relevant Step for the node.  It is this step that has rendering data for the nodeand the benefits that are provided if the node is activated.  (the actual rules for benefits providedare extremely complicated in theory, but with how Talent Grids are being used in Destiny 2 you don't have to worryabout a lot of those old Destiny 1 rules.)  This is an index into:DestinyTalentGridDefinition.nodes[nodeIndex].steps[stepIndex]

        :return: The step_index of this DestinyDestinyTalentNode.
        :rtype: int
        """
        return self._step_index

    @step_index.setter
    def step_index(self, step_index):
        """
        Sets the step_index of this DestinyDestinyTalentNode.
        The currently relevant Step for the node.  It is this step that has rendering data for the nodeand the benefits that are provided if the node is activated.  (the actual rules for benefits providedare extremely complicated in theory, but with how Talent Grids are being used in Destiny 2 you don't have to worryabout a lot of those old Destiny 1 rules.)  This is an index into:DestinyTalentGridDefinition.nodes[nodeIndex].steps[stepIndex]

        :param step_index: The step_index of this DestinyDestinyTalentNode.
        :type: int
        """

        self._step_index = step_index

    @property
    def materials_to_upgrade(self):
        """
        Gets the materials_to_upgrade of this DestinyDestinyTalentNode.
        If the node has material requirements to be activated, this is the list of those requirements.

        :return: The materials_to_upgrade of this DestinyDestinyTalentNode.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyMaterialRequirement]
        """
        return self._materials_to_upgrade

    @materials_to_upgrade.setter
    def materials_to_upgrade(self, materials_to_upgrade):
        """
        Sets the materials_to_upgrade of this DestinyDestinyTalentNode.
        If the node has material requirements to be activated, this is the list of those requirements.

        :param materials_to_upgrade: The materials_to_upgrade of this DestinyDestinyTalentNode.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyMaterialRequirement]
        """

        self._materials_to_upgrade = materials_to_upgrade

    @property
    def activation_grid_level(self):
        """
        Gets the activation_grid_level of this DestinyDestinyTalentNode.
        The progression level required on the Talent Grid in order to be able to activate this talent node.Talent Grids have their own Progression - similar to Character Level, but in this case it is experiencerelated to the item itself.

        :return: The activation_grid_level of this DestinyDestinyTalentNode.
        :rtype: int
        """
        return self._activation_grid_level

    @activation_grid_level.setter
    def activation_grid_level(self, activation_grid_level):
        """
        Sets the activation_grid_level of this DestinyDestinyTalentNode.
        The progression level required on the Talent Grid in order to be able to activate this talent node.Talent Grids have their own Progression - similar to Character Level, but in this case it is experiencerelated to the item itself.

        :param activation_grid_level: The activation_grid_level of this DestinyDestinyTalentNode.
        :type: int
        """

        self._activation_grid_level = activation_grid_level

    @property
    def progress_percent(self):
        """
        Gets the progress_percent of this DestinyDestinyTalentNode.
        If you want to show a progress bar or circle for how close this talent node is to being activate-able, thisis the percentage to show.  It follows the node's underlying rules about when the progress bar should firstshow up, and when it should be filled.

        :return: The progress_percent of this DestinyDestinyTalentNode.
        :rtype: float
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """
        Sets the progress_percent of this DestinyDestinyTalentNode.
        If you want to show a progress bar or circle for how close this talent node is to being activate-able, thisis the percentage to show.  It follows the node's underlying rules about when the progress bar should firstshow up, and when it should be filled.

        :param progress_percent: The progress_percent of this DestinyDestinyTalentNode.
        :type: float
        """

        self._progress_percent = progress_percent

    @property
    def hidden(self):
        """
        Gets the hidden of this DestinyDestinyTalentNode.
        Whether or not the talent node is actually visible in the game's UI.  Whether you want to show it in your ownUI is up to you!  I'm not gonna tell you who to sock it to.

        :return: The hidden of this DestinyDestinyTalentNode.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this DestinyDestinyTalentNode.
        Whether or not the talent node is actually visible in the game's UI.  Whether you want to show it in your ownUI is up to you!  I'm not gonna tell you who to sock it to.

        :param hidden: The hidden of this DestinyDestinyTalentNode.
        :type: bool
        """

        self._hidden = hidden

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDestinyTalentNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
