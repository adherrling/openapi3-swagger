# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locked_description': 'str',
        'buckets': 'list[ComponentsschemasDestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition]',
        'flyout_id': 'int',
        'suppress_newness': 'bool'
    }

    attribute_map = {
        'locked_description': 'lockedDescription',
        'buckets': 'buckets',
        'flyout_id': 'flyoutId',
        'suppress_newness': 'suppressNewness'
    }

    def __init__(self, locked_description=None, buckets=None, flyout_id=None, suppress_newness=None):
        """
        DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition - a model defined in Swagger
        """

        self._locked_description = None
        self._buckets = None
        self._flyout_id = None
        self._suppress_newness = None
        self.discriminator = None

        if locked_description is not None:
          self.locked_description = locked_description
        if buckets is not None:
          self.buckets = buckets
        if flyout_id is not None:
          self.flyout_id = flyout_id
        if suppress_newness is not None:
          self.suppress_newness = suppress_newness

    @property
    def locked_description(self):
        """
        Gets the locked_description of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        If the flyout is locked, this is the reason why.

        :return: The locked_description of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        :rtype: str
        """
        return self._locked_description

    @locked_description.setter
    def locked_description(self, locked_description):
        """
        Sets the locked_description of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        If the flyout is locked, this is the reason why.

        :param locked_description: The locked_description of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        :type: str
        """

        self._locked_description = locked_description

    @property
    def buckets(self):
        """
        Gets the buckets of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        A list of inventory buckets and other metadata to show on the screen.

        :return: The buckets of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition]
        """
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """
        Sets the buckets of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        A list of inventory buckets and other metadata to show on the screen.

        :param buckets: The buckets of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition]
        """

        self._buckets = buckets

    @property
    def flyout_id(self):
        """
        Gets the flyout_id of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        An identifier for the flyout, in case anything else needs to refer to them.

        :return: The flyout_id of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        :rtype: int
        """
        return self._flyout_id

    @flyout_id.setter
    def flyout_id(self, flyout_id):
        """
        Sets the flyout_id of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        An identifier for the flyout, in case anything else needs to refer to them.

        :param flyout_id: The flyout_id of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        :type: int
        """

        self._flyout_id = flyout_id

    @property
    def suppress_newness(self):
        """
        Gets the suppress_newness of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        If this is true, don't show any of the glistening \"this is a new item\" UI elements, like we show on the inventory itemsthemselves in in-game UI.

        :return: The suppress_newness of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        :rtype: bool
        """
        return self._suppress_newness

    @suppress_newness.setter
    def suppress_newness(self, suppress_newness):
        """
        Sets the suppress_newness of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        If this is true, don't show any of the glistening \"this is a new item\" UI elements, like we show on the inventory itemsthemselves in in-game UI.

        :param suppress_newness: The suppress_newness of this DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.
        :type: bool
        """

        self._suppress_newness = suppress_newness

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
