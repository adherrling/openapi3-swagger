# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserUserMembership(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'membership_id': 'int',
        'display_name': 'str'
    }

    attribute_map = {
        'membership_id': 'membershipId',
        'display_name': 'displayName'
    }

    def __init__(self, membership_id=None, display_name=None):
        """
        UserUserMembership - a model defined in Swagger
        """

        self._membership_id = None
        self._display_name = None
        self.discriminator = None

        if membership_id is not None:
          self.membership_id = membership_id
        if display_name is not None:
          self.display_name = display_name

    @property
    def membership_id(self):
        """
        Gets the membership_id of this UserUserMembership.
        Membership ID as they user is known in the Accounts service

        :return: The membership_id of this UserUserMembership.
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """
        Sets the membership_id of this UserUserMembership.
        Membership ID as they user is known in the Accounts service

        :param membership_id: The membership_id of this UserUserMembership.
        :type: int
        """

        self._membership_id = membership_id

    @property
    def display_name(self):
        """
        Gets the display_name of this UserUserMembership.
        Display Name the player has chosen for themselves. Thie display name is optional whenthe data type is used as input to a platform API.

        :return: The display_name of this UserUserMembership.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this UserUserMembership.
        Display Name the player has chosen for themselves. Thie display name is optional whenthe data type is used as input to a platform API.

        :param display_name: The display_name of this UserUserMembership.
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserUserMembership):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
