# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyItemObjectiveBlockDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'objective_hashes': 'list[int]',
        'display_activity_hashes': 'list[int]',
        'require_full_objective_completion': 'bool',
        'questline_item_hash': 'int',
        'narrative': 'str',
        'objective_verb_name': 'str',
        'quest_type_identifier': 'str',
        'quest_type_hash': 'int'
    }

    attribute_map = {
        'objective_hashes': 'objectiveHashes',
        'display_activity_hashes': 'displayActivityHashes',
        'require_full_objective_completion': 'requireFullObjectiveCompletion',
        'questline_item_hash': 'questlineItemHash',
        'narrative': 'narrative',
        'objective_verb_name': 'objectiveVerbName',
        'quest_type_identifier': 'questTypeIdentifier',
        'quest_type_hash': 'questTypeHash'
    }

    def __init__(self, objective_hashes=None, display_activity_hashes=None, require_full_objective_completion=None, questline_item_hash=None, narrative=None, objective_verb_name=None, quest_type_identifier=None, quest_type_hash=None):
        """
        DestinyDefinitionsDestinyItemObjectiveBlockDefinition - a model defined in Swagger
        """

        self._objective_hashes = None
        self._display_activity_hashes = None
        self._require_full_objective_completion = None
        self._questline_item_hash = None
        self._narrative = None
        self._objective_verb_name = None
        self._quest_type_identifier = None
        self._quest_type_hash = None
        self.discriminator = None

        if objective_hashes is not None:
          self.objective_hashes = objective_hashes
        if display_activity_hashes is not None:
          self.display_activity_hashes = display_activity_hashes
        if require_full_objective_completion is not None:
          self.require_full_objective_completion = require_full_objective_completion
        if questline_item_hash is not None:
          self.questline_item_hash = questline_item_hash
        if narrative is not None:
          self.narrative = narrative
        if objective_verb_name is not None:
          self.objective_verb_name = objective_verb_name
        if quest_type_identifier is not None:
          self.quest_type_identifier = quest_type_identifier
        if quest_type_hash is not None:
          self.quest_type_hash = quest_type_hash

    @property
    def objective_hashes(self):
        """
        Gets the objective_hashes of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        The hashes to Objectives (DestinyObjectiveDefinition) that are part of this Quest Step, in theorder that they should be rendered.

        :return: The objective_hashes of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :rtype: list[int]
        """
        return self._objective_hashes

    @objective_hashes.setter
    def objective_hashes(self, objective_hashes):
        """
        Sets the objective_hashes of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        The hashes to Objectives (DestinyObjectiveDefinition) that are part of this Quest Step, in theorder that they should be rendered.

        :param objective_hashes: The objective_hashes of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :type: list[int]
        """

        self._objective_hashes = objective_hashes

    @property
    def display_activity_hashes(self):
        """
        Gets the display_activity_hashes of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        For every entry in objectiveHashes, there is a corresponding entry in this arrayat the same index.  If the objective is meant to be associated with a specific DestinyActivityDefinition,there will be a valid hash at that index.  Otherwise, it will be invalid (0).

        :return: The display_activity_hashes of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :rtype: list[int]
        """
        return self._display_activity_hashes

    @display_activity_hashes.setter
    def display_activity_hashes(self, display_activity_hashes):
        """
        Sets the display_activity_hashes of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        For every entry in objectiveHashes, there is a corresponding entry in this arrayat the same index.  If the objective is meant to be associated with a specific DestinyActivityDefinition,there will be a valid hash at that index.  Otherwise, it will be invalid (0).

        :param display_activity_hashes: The display_activity_hashes of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :type: list[int]
        """

        self._display_activity_hashes = display_activity_hashes

    @property
    def require_full_objective_completion(self):
        """
        Gets the require_full_objective_completion of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        If True, all objectives must be completed for the step to be completed.If False, any one objective can be completed for the step to be completed.

        :return: The require_full_objective_completion of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :rtype: bool
        """
        return self._require_full_objective_completion

    @require_full_objective_completion.setter
    def require_full_objective_completion(self, require_full_objective_completion):
        """
        Sets the require_full_objective_completion of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        If True, all objectives must be completed for the step to be completed.If False, any one objective can be completed for the step to be completed.

        :param require_full_objective_completion: The require_full_objective_completion of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :type: bool
        """

        self._require_full_objective_completion = require_full_objective_completion

    @property
    def questline_item_hash(self):
        """
        Gets the questline_item_hash of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        The hash for the DestinyInventoryItemDefinition representing the Quest to which this Quest Step belongs.

        :return: The questline_item_hash of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :rtype: int
        """
        return self._questline_item_hash

    @questline_item_hash.setter
    def questline_item_hash(self, questline_item_hash):
        """
        Sets the questline_item_hash of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        The hash for the DestinyInventoryItemDefinition representing the Quest to which this Quest Step belongs.

        :param questline_item_hash: The questline_item_hash of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :type: int
        """

        self._questline_item_hash = questline_item_hash

    @property
    def narrative(self):
        """
        Gets the narrative of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        The localized string for narrative text related to this quest step, if any.

        :return: The narrative of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :rtype: str
        """
        return self._narrative

    @narrative.setter
    def narrative(self, narrative):
        """
        Sets the narrative of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        The localized string for narrative text related to this quest step, if any.

        :param narrative: The narrative of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :type: str
        """

        self._narrative = narrative

    @property
    def objective_verb_name(self):
        """
        Gets the objective_verb_name of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        The localized string describing an action to be performed associated with the objectives, if any.

        :return: The objective_verb_name of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :rtype: str
        """
        return self._objective_verb_name

    @objective_verb_name.setter
    def objective_verb_name(self, objective_verb_name):
        """
        Sets the objective_verb_name of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        The localized string describing an action to be performed associated with the objectives, if any.

        :param objective_verb_name: The objective_verb_name of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :type: str
        """

        self._objective_verb_name = objective_verb_name

    @property
    def quest_type_identifier(self):
        """
        Gets the quest_type_identifier of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        The identifier for the type of quest being performed, if any.  Not associated with any fixed definition, yet.

        :return: The quest_type_identifier of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :rtype: str
        """
        return self._quest_type_identifier

    @quest_type_identifier.setter
    def quest_type_identifier(self, quest_type_identifier):
        """
        Sets the quest_type_identifier of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        The identifier for the type of quest being performed, if any.  Not associated with any fixed definition, yet.

        :param quest_type_identifier: The quest_type_identifier of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :type: str
        """

        self._quest_type_identifier = quest_type_identifier

    @property
    def quest_type_hash(self):
        """
        Gets the quest_type_hash of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        A hashed value for the questTypeIdentifier, because apparently I like to be redundant.

        :return: The quest_type_hash of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :rtype: int
        """
        return self._quest_type_hash

    @quest_type_hash.setter
    def quest_type_hash(self, quest_type_hash):
        """
        Sets the quest_type_hash of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        A hashed value for the questTypeIdentifier, because apparently I like to be redundant.

        :param quest_type_hash: The quest_type_hash of this DestinyDefinitionsDestinyItemObjectiveBlockDefinition.
        :type: int
        """

        self._quest_type_hash = quest_type_hash

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyItemObjectiveBlockDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
