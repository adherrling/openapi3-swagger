# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collapsible': 'bool',
        'inventory_bucket_hash': 'int'
    }

    attribute_map = {
        'collapsible': 'collapsible',
        'inventory_bucket_hash': 'inventoryBucketHash'
    }

    def __init__(self, collapsible=None, inventory_bucket_hash=None):
        """
        DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition - a model defined in Swagger
        """

        self._collapsible = None
        self._inventory_bucket_hash = None
        self.discriminator = None

        if collapsible is not None:
          self.collapsible = collapsible
        if inventory_bucket_hash is not None:
          self.inventory_bucket_hash = inventory_bucket_hash

    @property
    def collapsible(self):
        """
        Gets the collapsible of this DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition.
        If true, the inventory bucket should be able to be collapsed visually.

        :return: The collapsible of this DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition.
        :rtype: bool
        """
        return self._collapsible

    @collapsible.setter
    def collapsible(self, collapsible):
        """
        Sets the collapsible of this DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition.
        If true, the inventory bucket should be able to be collapsed visually.

        :param collapsible: The collapsible of this DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition.
        :type: bool
        """

        self._collapsible = collapsible

    @property
    def inventory_bucket_hash(self):
        """
        Gets the inventory_bucket_hash of this DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition.
        The inventory bucket whose contents should be shown.

        :return: The inventory_bucket_hash of this DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition.
        :rtype: int
        """
        return self._inventory_bucket_hash

    @inventory_bucket_hash.setter
    def inventory_bucket_hash(self, inventory_bucket_hash):
        """
        Sets the inventory_bucket_hash of this DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition.
        The inventory bucket whose contents should be shown.

        :param inventory_bucket_hash: The inventory_bucket_hash of this DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition.
        :type: int
        """

        self._inventory_bucket_hash = inventory_bucket_hash

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
