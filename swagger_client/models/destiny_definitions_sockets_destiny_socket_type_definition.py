# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsSocketsDestinySocketTypeDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plug_whitelist': 'list[ComponentsschemasDestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition]',
        'socket_category_hash': 'int',
        'visibility': 'ComponentsschemasDestinyDestinySocketVisibility',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'plug_whitelist': 'plugWhitelist',
        'socket_category_hash': 'socketCategoryHash',
        'visibility': 'visibility',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, plug_whitelist=None, socket_category_hash=None, visibility=None, hash=None, index=None, redacted=None):
        """
        DestinyDefinitionsSocketsDestinySocketTypeDefinition - a model defined in Swagger
        """

        self._plug_whitelist = None
        self._socket_category_hash = None
        self._visibility = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if plug_whitelist is not None:
          self.plug_whitelist = plug_whitelist
        if socket_category_hash is not None:
          self.socket_category_hash = socket_category_hash
        if visibility is not None:
          self.visibility = visibility
        if hash is not None:
          self.hash = hash
        if index is not None:
          self.index = index
        if redacted is not None:
          self.redacted = redacted

    @property
    def plug_whitelist(self):
        """
        Gets the plug_whitelist of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        A list of Plug \"Categories\" that are allowed to be plugged into sockets of this type.  These should be compared against a given plug item's DestinyInventoryItemDefinition.plug.plugCategoryHash,which indicates the plug item's category.  If the plug's category matches any whitelisted plug, or if the whitelist is empty, it is allowed to be inserted.

        :return: The plug_whitelist of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition]
        """
        return self._plug_whitelist

    @plug_whitelist.setter
    def plug_whitelist(self, plug_whitelist):
        """
        Sets the plug_whitelist of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        A list of Plug \"Categories\" that are allowed to be plugged into sockets of this type.  These should be compared against a given plug item's DestinyInventoryItemDefinition.plug.plugCategoryHash,which indicates the plug item's category.  If the plug's category matches any whitelisted plug, or if the whitelist is empty, it is allowed to be inserted.

        :param plug_whitelist: The plug_whitelist of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition]
        """

        self._plug_whitelist = plug_whitelist

    @property
    def socket_category_hash(self):
        """
        Gets the socket_category_hash of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.

        :return: The socket_category_hash of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :rtype: int
        """
        return self._socket_category_hash

    @socket_category_hash.setter
    def socket_category_hash(self, socket_category_hash):
        """
        Sets the socket_category_hash of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.

        :param socket_category_hash: The socket_category_hash of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :type: int
        """

        self._socket_category_hash = socket_category_hash

    @property
    def visibility(self):
        """
        Gets the visibility of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.

        :return: The visibility of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :rtype: ComponentsschemasDestinyDestinySocketVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.

        :param visibility: The visibility of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :type: ComponentsschemasDestinyDestinySocketVisibility
        """

        self._visibility = visibility

    @property
    def hash(self):
        """
        Gets the hash of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        The unique identifier for this entity.  Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        The unique identifier for this entity.  Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """
        Gets the index of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """
        Sets the index of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """
        Gets the redacted of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        If this is true, then there is an entity with this identifier/type combination, but BNet isnot yet allowed to show it.  Sorry!

        :return: The redacted of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """
        Sets the redacted of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        If this is true, then there is an entity with this identifier/type combination, but BNet isnot yet allowed to show it.  Sorry!

        :param redacted: The redacted of this DestinyDefinitionsSocketsDestinySocketTypeDefinition.
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsSocketsDestinySocketTypeDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
