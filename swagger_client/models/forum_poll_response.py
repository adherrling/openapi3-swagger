# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ForumPollResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'topic_id': 'int',
        'results': 'list[ComponentsschemasForumPollResult]',
        'total_votes': 'int'
    }

    attribute_map = {
        'topic_id': 'topicId',
        'results': 'results',
        'total_votes': 'totalVotes'
    }

    def __init__(self, topic_id=None, results=None, total_votes=None):
        """
        ForumPollResponse - a model defined in Swagger
        """

        self._topic_id = None
        self._results = None
        self._total_votes = None
        self.discriminator = None

        if topic_id is not None:
          self.topic_id = topic_id
        if results is not None:
          self.results = results
        if total_votes is not None:
          self.total_votes = total_votes

    @property
    def topic_id(self):
        """
        Gets the topic_id of this ForumPollResponse.

        :return: The topic_id of this ForumPollResponse.
        :rtype: int
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """
        Sets the topic_id of this ForumPollResponse.

        :param topic_id: The topic_id of this ForumPollResponse.
        :type: int
        """

        self._topic_id = topic_id

    @property
    def results(self):
        """
        Gets the results of this ForumPollResponse.

        :return: The results of this ForumPollResponse.
        :rtype: list[ComponentsschemasForumPollResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """
        Sets the results of this ForumPollResponse.

        :param results: The results of this ForumPollResponse.
        :type: list[ComponentsschemasForumPollResult]
        """

        self._results = results

    @property
    def total_votes(self):
        """
        Gets the total_votes of this ForumPollResponse.

        :return: The total_votes of this ForumPollResponse.
        :rtype: int
        """
        return self._total_votes

    @total_votes.setter
    def total_votes(self, total_votes):
        """
        Sets the total_votes of this ForumPollResponse.

        :param total_votes: The total_votes of this ForumPollResponse.
        :type: int
        """

        self._total_votes = total_votes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ForumPollResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
