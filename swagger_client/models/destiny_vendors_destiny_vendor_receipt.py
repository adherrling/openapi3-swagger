# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyVendorsDestinyVendorReceipt(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_paid': 'list[ComponentsschemasDestinyDestinyItemQuantity]',
        'license_unlock_hash': 'int',
        'purchased_by_character_id': 'int',
        'sequence_number': 'int',
        'time_to_expiration': 'int',
        'expires_on': 'datetime'
    }

    attribute_map = {
        'currency_paid': 'currencyPaid',
        'license_unlock_hash': 'licenseUnlockHash',
        'purchased_by_character_id': 'purchasedByCharacterId',
        'sequence_number': 'sequenceNumber',
        'time_to_expiration': 'timeToExpiration',
        'expires_on': 'expiresOn'
    }

    def __init__(self, currency_paid=None, license_unlock_hash=None, purchased_by_character_id=None, sequence_number=None, time_to_expiration=None, expires_on=None):
        """
        DestinyVendorsDestinyVendorReceipt - a model defined in Swagger
        """

        self._currency_paid = None
        self._license_unlock_hash = None
        self._purchased_by_character_id = None
        self._sequence_number = None
        self._time_to_expiration = None
        self._expires_on = None
        self.discriminator = None

        if currency_paid is not None:
          self.currency_paid = currency_paid
        if license_unlock_hash is not None:
          self.license_unlock_hash = license_unlock_hash
        if purchased_by_character_id is not None:
          self.purchased_by_character_id = purchased_by_character_id
        if sequence_number is not None:
          self.sequence_number = sequence_number
        if time_to_expiration is not None:
          self.time_to_expiration = time_to_expiration
        if expires_on is not None:
          self.expires_on = expires_on

    @property
    def currency_paid(self):
        """
        Gets the currency_paid of this DestinyVendorsDestinyVendorReceipt.
        The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.

        :return: The currency_paid of this DestinyVendorsDestinyVendorReceipt.
        :rtype: list[ComponentsschemasDestinyDestinyItemQuantity]
        """
        return self._currency_paid

    @currency_paid.setter
    def currency_paid(self, currency_paid):
        """
        Sets the currency_paid of this DestinyVendorsDestinyVendorReceipt.
        The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.

        :param currency_paid: The currency_paid of this DestinyVendorsDestinyVendorReceipt.
        :type: list[ComponentsschemasDestinyDestinyItemQuantity]
        """

        self._currency_paid = currency_paid

    @property
    def license_unlock_hash(self):
        """
        Gets the license_unlock_hash of this DestinyVendorsDestinyVendorReceipt.
        The unlock flag used to determine whether you still have the purchased item.

        :return: The license_unlock_hash of this DestinyVendorsDestinyVendorReceipt.
        :rtype: int
        """
        return self._license_unlock_hash

    @license_unlock_hash.setter
    def license_unlock_hash(self, license_unlock_hash):
        """
        Sets the license_unlock_hash of this DestinyVendorsDestinyVendorReceipt.
        The unlock flag used to determine whether you still have the purchased item.

        :param license_unlock_hash: The license_unlock_hash of this DestinyVendorsDestinyVendorReceipt.
        :type: int
        """

        self._license_unlock_hash = license_unlock_hash

    @property
    def purchased_by_character_id(self):
        """
        Gets the purchased_by_character_id of this DestinyVendorsDestinyVendorReceipt.
        The ID of the character who made the purchase.

        :return: The purchased_by_character_id of this DestinyVendorsDestinyVendorReceipt.
        :rtype: int
        """
        return self._purchased_by_character_id

    @purchased_by_character_id.setter
    def purchased_by_character_id(self, purchased_by_character_id):
        """
        Sets the purchased_by_character_id of this DestinyVendorsDestinyVendorReceipt.
        The ID of the character who made the purchase.

        :param purchased_by_character_id: The purchased_by_character_id of this DestinyVendorsDestinyVendorReceipt.
        :type: int
        """

        self._purchased_by_character_id = purchased_by_character_id

    @property
    def sequence_number(self):
        """
        Gets the sequence_number of this DestinyVendorsDestinyVendorReceipt.
        The identifier of this receipt.

        :return: The sequence_number of this DestinyVendorsDestinyVendorReceipt.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """
        Sets the sequence_number of this DestinyVendorsDestinyVendorReceipt.
        The identifier of this receipt.

        :param sequence_number: The sequence_number of this DestinyVendorsDestinyVendorReceipt.
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def time_to_expiration(self):
        """
        Gets the time_to_expiration of this DestinyVendorsDestinyVendorReceipt.
        The seconds since epoch at which this receipt is rendered invalid.

        :return: The time_to_expiration of this DestinyVendorsDestinyVendorReceipt.
        :rtype: int
        """
        return self._time_to_expiration

    @time_to_expiration.setter
    def time_to_expiration(self, time_to_expiration):
        """
        Sets the time_to_expiration of this DestinyVendorsDestinyVendorReceipt.
        The seconds since epoch at which this receipt is rendered invalid.

        :param time_to_expiration: The time_to_expiration of this DestinyVendorsDestinyVendorReceipt.
        :type: int
        """

        self._time_to_expiration = time_to_expiration

    @property
    def expires_on(self):
        """
        Gets the expires_on of this DestinyVendorsDestinyVendorReceipt.
        The date at which this receipt is rendered invalid.

        :return: The expires_on of this DestinyVendorsDestinyVendorReceipt.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """
        Sets the expires_on of this DestinyVendorsDestinyVendorReceipt.
        The date at which this receipt is rendered invalid.

        :param expires_on: The expires_on of this DestinyVendorsDestinyVendorReceipt.
        :type: datetime
        """

        self._expires_on = expires_on

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyVendorsDestinyVendorReceipt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
