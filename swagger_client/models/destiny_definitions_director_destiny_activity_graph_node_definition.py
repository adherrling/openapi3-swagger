# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_id': 'int',
        'featuring_states': 'list[ComponentsschemasDestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition]',
        'activities': 'list[ComponentsschemasDestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition]'
    }

    attribute_map = {
        'node_id': 'nodeId',
        'featuring_states': 'featuringStates',
        'activities': 'activities'
    }

    def __init__(self, node_id=None, featuring_states=None, activities=None):
        """
        DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition - a model defined in Swagger
        """

        self._node_id = None
        self._featuring_states = None
        self._activities = None
        self.discriminator = None

        if node_id is not None:
          self.node_id = node_id
        if featuring_states is not None:
          self.featuring_states = featuring_states
        if activities is not None:
          self.activities = activities

    @property
    def node_id(self):
        """
        Gets the node_id of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.

        :return: The node_id of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """
        Sets the node_id of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.

        :param node_id: The node_id of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :type: int
        """

        self._node_id = node_id

    @property
    def featuring_states(self):
        """
        Gets the featuring_states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        The node may have various visual accents placed on it, or styles applied.  These are the list of possible stylesthat the Node can have.  The game iterates through each, looking for the first one that passes a check of the requiredgame/character/account state in order to show that style, and then renders the node in that style.

        :return: The featuring_states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition]
        """
        return self._featuring_states

    @featuring_states.setter
    def featuring_states(self, featuring_states):
        """
        Sets the featuring_states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        The node may have various visual accents placed on it, or styles applied.  These are the list of possible stylesthat the Node can have.  The game iterates through each, looking for the first one that passes a check of the requiredgame/character/account state in order to show that style, and then renders the node in that style.

        :param featuring_states: The featuring_states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition]
        """

        self._featuring_states = featuring_states

    @property
    def activities(self):
        """
        Gets the activities of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        The node may have various possible activities that could be active for it, however only one may be activeat a time.  See the DestinyActivityGraphNodeActivityDefinition for details.

        :return: The activities of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :rtype: list[ComponentsschemasDestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """
        Sets the activities of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        The node may have various possible activities that could be active for it, however only one may be activeat a time.  See the DestinyActivityGraphNodeActivityDefinition for details.

        :param activities: The activities of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :type: list[ComponentsschemasDestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition]
        """

        self._activities = activities

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
