# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyStatDisplayDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stat_hash': 'int',
        'maximum_value': 'int',
        'display_as_numeric': 'bool',
        'display_interpolation': 'list[ComponentsschemasInterpolationInterpolationPoint]'
    }

    attribute_map = {
        'stat_hash': 'statHash',
        'maximum_value': 'maximumValue',
        'display_as_numeric': 'displayAsNumeric',
        'display_interpolation': 'displayInterpolation'
    }

    def __init__(self, stat_hash=None, maximum_value=None, display_as_numeric=None, display_interpolation=None):
        """
        DestinyDefinitionsDestinyStatDisplayDefinition - a model defined in Swagger
        """

        self._stat_hash = None
        self._maximum_value = None
        self._display_as_numeric = None
        self._display_interpolation = None
        self.discriminator = None

        if stat_hash is not None:
          self.stat_hash = stat_hash
        if maximum_value is not None:
          self.maximum_value = maximum_value
        if display_as_numeric is not None:
          self.display_as_numeric = display_as_numeric
        if display_interpolation is not None:
          self.display_interpolation = display_interpolation

    @property
    def stat_hash(self):
        """
        Gets the stat_hash of this DestinyDefinitionsDestinyStatDisplayDefinition.
        The hash identifier for the stat being transformed into a Display stat.  Use it to look up the DestinyStatDefinition, or key into a DestinyInventoryItemDefinition'sstats property.

        :return: The stat_hash of this DestinyDefinitionsDestinyStatDisplayDefinition.
        :rtype: int
        """
        return self._stat_hash

    @stat_hash.setter
    def stat_hash(self, stat_hash):
        """
        Sets the stat_hash of this DestinyDefinitionsDestinyStatDisplayDefinition.
        The hash identifier for the stat being transformed into a Display stat.  Use it to look up the DestinyStatDefinition, or key into a DestinyInventoryItemDefinition'sstats property.

        :param stat_hash: The stat_hash of this DestinyDefinitionsDestinyStatDisplayDefinition.
        :type: int
        """

        self._stat_hash = stat_hash

    @property
    def maximum_value(self):
        """
        Gets the maximum_value of this DestinyDefinitionsDestinyStatDisplayDefinition.
        Regardless of the output of interpolation, this is the maximum possible valuethat the stat can be.  It should also be used as the upper boundfor displaying the stat as a progress bar (the minimum always being 0)

        :return: The maximum_value of this DestinyDefinitionsDestinyStatDisplayDefinition.
        :rtype: int
        """
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value):
        """
        Sets the maximum_value of this DestinyDefinitionsDestinyStatDisplayDefinition.
        Regardless of the output of interpolation, this is the maximum possible valuethat the stat can be.  It should also be used as the upper boundfor displaying the stat as a progress bar (the minimum always being 0)

        :param maximum_value: The maximum_value of this DestinyDefinitionsDestinyStatDisplayDefinition.
        :type: int
        """

        self._maximum_value = maximum_value

    @property
    def display_as_numeric(self):
        """
        Gets the display_as_numeric of this DestinyDefinitionsDestinyStatDisplayDefinition.
        If this is true, the stat should be displayed as a number.  Otherwise, display it asa progress bar.  Or, you know, do whatever you want.  There's no displayAsNumericpolice.

        :return: The display_as_numeric of this DestinyDefinitionsDestinyStatDisplayDefinition.
        :rtype: bool
        """
        return self._display_as_numeric

    @display_as_numeric.setter
    def display_as_numeric(self, display_as_numeric):
        """
        Sets the display_as_numeric of this DestinyDefinitionsDestinyStatDisplayDefinition.
        If this is true, the stat should be displayed as a number.  Otherwise, display it asa progress bar.  Or, you know, do whatever you want.  There's no displayAsNumericpolice.

        :param display_as_numeric: The display_as_numeric of this DestinyDefinitionsDestinyStatDisplayDefinition.
        :type: bool
        """

        self._display_as_numeric = display_as_numeric

    @property
    def display_interpolation(self):
        """
        Gets the display_interpolation of this DestinyDefinitionsDestinyStatDisplayDefinition.
        The interpolation table representing how the Investment Stat is transformed intoa Display Stat.    See DestinyStatDefinition for a description of the stages ofstat transformation.

        :return: The display_interpolation of this DestinyDefinitionsDestinyStatDisplayDefinition.
        :rtype: list[ComponentsschemasInterpolationInterpolationPoint]
        """
        return self._display_interpolation

    @display_interpolation.setter
    def display_interpolation(self, display_interpolation):
        """
        Sets the display_interpolation of this DestinyDefinitionsDestinyStatDisplayDefinition.
        The interpolation table representing how the Investment Stat is transformed intoa Display Stat.    See DestinyStatDefinition for a description of the stages ofstat transformation.

        :param display_interpolation: The display_interpolation of this DestinyDefinitionsDestinyStatDisplayDefinition.
        :type: list[ComponentsschemasInterpolationInterpolationPoint]
        """

        self._display_interpolation = display_interpolation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyStatDisplayDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
