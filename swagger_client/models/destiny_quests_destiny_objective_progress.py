# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyQuestsDestinyObjectiveProgress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'objective_hash': 'int',
        'destination_hash': 'int',
        'activity_hash': 'int',
        'progress': 'int',
        'complete': 'bool'
    }

    attribute_map = {
        'objective_hash': 'objectiveHash',
        'destination_hash': 'destinationHash',
        'activity_hash': 'activityHash',
        'progress': 'progress',
        'complete': 'complete'
    }

    def __init__(self, objective_hash=None, destination_hash=None, activity_hash=None, progress=None, complete=None):
        """
        DestinyQuestsDestinyObjectiveProgress - a model defined in Swagger
        """

        self._objective_hash = None
        self._destination_hash = None
        self._activity_hash = None
        self._progress = None
        self._complete = None
        self.discriminator = None

        if objective_hash is not None:
          self.objective_hash = objective_hash
        if destination_hash is not None:
          self.destination_hash = destination_hash
        if activity_hash is not None:
          self.activity_hash = activity_hash
        if progress is not None:
          self.progress = progress
        if complete is not None:
          self.complete = complete

    @property
    def objective_hash(self):
        """
        Gets the objective_hash of this DestinyQuestsDestinyObjectiveProgress.
        The unique identifier of the Objective being referred to.  Use to look up the DestinyObjectiveDefinition in static data.

        :return: The objective_hash of this DestinyQuestsDestinyObjectiveProgress.
        :rtype: int
        """
        return self._objective_hash

    @objective_hash.setter
    def objective_hash(self, objective_hash):
        """
        Sets the objective_hash of this DestinyQuestsDestinyObjectiveProgress.
        The unique identifier of the Objective being referred to.  Use to look up the DestinyObjectiveDefinition in static data.

        :param objective_hash: The objective_hash of this DestinyQuestsDestinyObjectiveProgress.
        :type: int
        """

        self._objective_hash = objective_hash

    @property
    def destination_hash(self):
        """
        Gets the destination_hash of this DestinyQuestsDestinyObjectiveProgress.
        If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to.Use to look up the DestinyDestinationDefinition in static data.This will give localized data about *where* in the universe the objective should be achieved.

        :return: The destination_hash of this DestinyQuestsDestinyObjectiveProgress.
        :rtype: int
        """
        return self._destination_hash

    @destination_hash.setter
    def destination_hash(self, destination_hash):
        """
        Sets the destination_hash of this DestinyQuestsDestinyObjectiveProgress.
        If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to.Use to look up the DestinyDestinationDefinition in static data.This will give localized data about *where* in the universe the objective should be achieved.

        :param destination_hash: The destination_hash of this DestinyQuestsDestinyObjectiveProgress.
        :type: int
        """

        self._destination_hash = destination_hash

    @property
    def activity_hash(self):
        """
        Gets the activity_hash of this DestinyQuestsDestinyObjectiveProgress.
        If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to.Use to look up the DestinyActivityDefinition in static data.This will give localized data about *what* you should be playing for the objective to be achieved.

        :return: The activity_hash of this DestinyQuestsDestinyObjectiveProgress.
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """
        Sets the activity_hash of this DestinyQuestsDestinyObjectiveProgress.
        If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to.Use to look up the DestinyActivityDefinition in static data.This will give localized data about *what* you should be playing for the objective to be achieved.

        :param activity_hash: The activity_hash of this DestinyQuestsDestinyObjectiveProgress.
        :type: int
        """

        self._activity_hash = activity_hash

    @property
    def progress(self):
        """
        Gets the progress of this DestinyQuestsDestinyObjectiveProgress.
        If progress has been made, and the progress can be measured numerically, this will be the value of that progress.You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds,and use DestinyObjectiveDefinition.valueStyle to determine how this should be rendered.Note that progress, in Destiny 2, need not be a literal numeric progression.  It could be one of a number ofpossible values, even a Timestamp.  Always examine DestinyObjectiveDefinition.valueStyle before renderingprogress.

        :return: The progress of this DestinyQuestsDestinyObjectiveProgress.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """
        Sets the progress of this DestinyQuestsDestinyObjectiveProgress.
        If progress has been made, and the progress can be measured numerically, this will be the value of that progress.You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds,and use DestinyObjectiveDefinition.valueStyle to determine how this should be rendered.Note that progress, in Destiny 2, need not be a literal numeric progression.  It could be one of a number ofpossible values, even a Timestamp.  Always examine DestinyObjectiveDefinition.valueStyle before renderingprogress.

        :param progress: The progress of this DestinyQuestsDestinyObjectiveProgress.
        :type: int
        """

        self._progress = progress

    @property
    def complete(self):
        """
        Gets the complete of this DestinyQuestsDestinyObjectiveProgress.
        Whether or not the Objective is completed.

        :return: The complete of this DestinyQuestsDestinyObjectiveProgress.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """
        Sets the complete of this DestinyQuestsDestinyObjectiveProgress.
        Whether or not the Objective is completed.

        :param complete: The complete of this DestinyQuestsDestinyObjectiveProgress.
        :type: bool
        """

        self._complete = complete

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyQuestsDestinyObjectiveProgress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
