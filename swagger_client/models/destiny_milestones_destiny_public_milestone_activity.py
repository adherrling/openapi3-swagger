# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyMilestonesDestinyPublicMilestoneActivity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_hash': 'int',
        'modifier_hashes': 'list[int]',
        'variants': 'list[ComponentsschemasDestinyMilestonesDestinyPublicMilestoneActivityVariant]'
    }

    attribute_map = {
        'activity_hash': 'activityHash',
        'modifier_hashes': 'modifierHashes',
        'variants': 'variants'
    }

    def __init__(self, activity_hash=None, modifier_hashes=None, variants=None):
        """
        DestinyMilestonesDestinyPublicMilestoneActivity - a model defined in Swagger
        """

        self._activity_hash = None
        self._modifier_hashes = None
        self._variants = None
        self.discriminator = None

        if activity_hash is not None:
          self.activity_hash = activity_hash
        if modifier_hashes is not None:
          self.modifier_hashes = modifier_hashes
        if variants is not None:
          self.variants = variants

    @property
    def activity_hash(self):
        """
        Gets the activity_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.
        The hash identifier of the activity that's been chosen to be considered the canonical \"conceptual\" activity definition.  This may have many variants, defined herein.

        :return: The activity_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """
        Sets the activity_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.
        The hash identifier of the activity that's been chosen to be considered the canonical \"conceptual\" activity definition.  This may have many variants, defined herein.

        :param activity_hash: The activity_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.
        :type: int
        """

        self._activity_hash = activity_hash

    @property
    def modifier_hashes(self):
        """
        Gets the modifier_hashes of this DestinyMilestonesDestinyPublicMilestoneActivity.
        The activity may have 0-to-many modifiers: if it does, this will contain the hashesto the DestinyActivityModifierDefinition that defines the modifier being applied.

        :return: The modifier_hashes of this DestinyMilestonesDestinyPublicMilestoneActivity.
        :rtype: list[int]
        """
        return self._modifier_hashes

    @modifier_hashes.setter
    def modifier_hashes(self, modifier_hashes):
        """
        Sets the modifier_hashes of this DestinyMilestonesDestinyPublicMilestoneActivity.
        The activity may have 0-to-many modifiers: if it does, this will contain the hashesto the DestinyActivityModifierDefinition that defines the modifier being applied.

        :param modifier_hashes: The modifier_hashes of this DestinyMilestonesDestinyPublicMilestoneActivity.
        :type: list[int]
        """

        self._modifier_hashes = modifier_hashes

    @property
    def variants(self):
        """
        Gets the variants of this DestinyMilestonesDestinyPublicMilestoneActivity.
        Every relevant variation of this conceptual activity, including the conceptual activity itself,have variants defined here.

        :return: The variants of this DestinyMilestonesDestinyPublicMilestoneActivity.
        :rtype: list[ComponentsschemasDestinyMilestonesDestinyPublicMilestoneActivityVariant]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """
        Sets the variants of this DestinyMilestonesDestinyPublicMilestoneActivity.
        Every relevant variation of this conceptual activity, including the conceptual activity itself,have variants defined here.

        :param variants: The variants of this DestinyMilestonesDestinyPublicMilestoneActivity.
        :type: list[ComponentsschemasDestinyMilestonesDestinyPublicMilestoneActivityVariant]
        """

        self._variants = variants

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyMilestonesDestinyPublicMilestoneActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
