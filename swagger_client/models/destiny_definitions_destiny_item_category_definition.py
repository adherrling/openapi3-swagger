# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DestinyDefinitionsDestinyItemCategoryDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_properties': 'ComponentsschemasDestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'visible': 'bool',
        'short_title': 'str',
        'item_type_regex': 'str',
        'item_type_regex_not': 'str',
        'origin_bucket_identifier': 'str',
        'grouped_category_hashes': 'list[int]',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'visible': 'visible',
        'short_title': 'shortTitle',
        'item_type_regex': 'itemTypeRegex',
        'item_type_regex_not': 'itemTypeRegexNot',
        'origin_bucket_identifier': 'originBucketIdentifier',
        'grouped_category_hashes': 'groupedCategoryHashes',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, visible=None, short_title=None, item_type_regex=None, item_type_regex_not=None, origin_bucket_identifier=None, grouped_category_hashes=None, hash=None, index=None, redacted=None):
        """
        DestinyDefinitionsDestinyItemCategoryDefinition - a model defined in Swagger
        """

        self._display_properties = None
        self._visible = None
        self._short_title = None
        self._item_type_regex = None
        self._item_type_regex_not = None
        self._origin_bucket_identifier = None
        self._grouped_category_hashes = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
          self.display_properties = display_properties
        if visible is not None:
          self.visible = visible
        if short_title is not None:
          self.short_title = short_title
        if item_type_regex is not None:
          self.item_type_regex = item_type_regex
        if item_type_regex_not is not None:
          self.item_type_regex_not = item_type_regex_not
        if origin_bucket_identifier is not None:
          self.origin_bucket_identifier = origin_bucket_identifier
        if grouped_category_hashes is not None:
          self.grouped_category_hashes = grouped_category_hashes
        if hash is not None:
          self.hash = hash
        if index is not None:
          self.index = index
        if redacted is not None:
          self.redacted = redacted

    @property
    def display_properties(self):
        """
        Gets the display_properties of this DestinyDefinitionsDestinyItemCategoryDefinition.

        :return: The display_properties of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: ComponentsschemasDestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """
        Sets the display_properties of this DestinyDefinitionsDestinyItemCategoryDefinition.

        :param display_properties: The display_properties of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type: ComponentsschemasDestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def visible(self):
        """
        Gets the visible of this DestinyDefinitionsDestinyItemCategoryDefinition.
        If True, this category should be visible in UI.  Sometimes we make categories that wedon't think are interesting externally.  It's up to you if you want to skip on showing them.

        :return: The visible of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """
        Sets the visible of this DestinyDefinitionsDestinyItemCategoryDefinition.
        If True, this category should be visible in UI.  Sometimes we make categories that wedon't think are interesting externally.  It's up to you if you want to skip on showing them.

        :param visible: The visible of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type: bool
        """

        self._visible = visible

    @property
    def short_title(self):
        """
        Gets the short_title of this DestinyDefinitionsDestinyItemCategoryDefinition.
        A shortened version of the title.  The reason why we have this is because the Armory in Germanhad titles that were too long to display in our UI, so these were localized abbreviated versionsof those categories.  The property still exists today, even though the Armory doesn't exist for D2... yet.

        :return: The short_title of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """
        Sets the short_title of this DestinyDefinitionsDestinyItemCategoryDefinition.
        A shortened version of the title.  The reason why we have this is because the Armory in Germanhad titles that were too long to display in our UI, so these were localized abbreviated versionsof those categories.  The property still exists today, even though the Armory doesn't exist for D2... yet.

        :param short_title: The short_title of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type: str
        """

        self._short_title = short_title

    @property
    def item_type_regex(self):
        """
        Gets the item_type_regex of this DestinyDefinitionsDestinyItemCategoryDefinition.
        The janky regular expression we used against the item type to try and discern whetherthe item belongs to this category.

        :return: The item_type_regex of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: str
        """
        return self._item_type_regex

    @item_type_regex.setter
    def item_type_regex(self, item_type_regex):
        """
        Sets the item_type_regex of this DestinyDefinitionsDestinyItemCategoryDefinition.
        The janky regular expression we used against the item type to try and discern whetherthe item belongs to this category.

        :param item_type_regex: The item_type_regex of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type: str
        """

        self._item_type_regex = item_type_regex

    @property
    def item_type_regex_not(self):
        """
        Gets the item_type_regex_not of this DestinyDefinitionsDestinyItemCategoryDefinition.
        If the item type matches this janky regex, it does *not* belong to this category.

        :return: The item_type_regex_not of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: str
        """
        return self._item_type_regex_not

    @item_type_regex_not.setter
    def item_type_regex_not(self, item_type_regex_not):
        """
        Sets the item_type_regex_not of this DestinyDefinitionsDestinyItemCategoryDefinition.
        If the item type matches this janky regex, it does *not* belong to this category.

        :param item_type_regex_not: The item_type_regex_not of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type: str
        """

        self._item_type_regex_not = item_type_regex_not

    @property
    def origin_bucket_identifier(self):
        """
        Gets the origin_bucket_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.
        If the item belongs to this bucket, it does belong to this category.

        :return: The origin_bucket_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: str
        """
        return self._origin_bucket_identifier

    @origin_bucket_identifier.setter
    def origin_bucket_identifier(self, origin_bucket_identifier):
        """
        Sets the origin_bucket_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.
        If the item belongs to this bucket, it does belong to this category.

        :param origin_bucket_identifier: The origin_bucket_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type: str
        """

        self._origin_bucket_identifier = origin_bucket_identifier

    @property
    def grouped_category_hashes(self):
        """
        Gets the grouped_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.
        If this category is a \"parent\" category of other categories, those children will have theirhashes listed in rendering order here, and can be looked up using these hashes againstDestinyItemCategoryDefinition.  In this way, you can build up a visual hierarchy of item categories.  That's what we did,and you can do it too.  I believe in you.  Yes, you, Carl.  (I hope someone named Carl reads this someday)

        :return: The grouped_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: list[int]
        """
        return self._grouped_category_hashes

    @grouped_category_hashes.setter
    def grouped_category_hashes(self, grouped_category_hashes):
        """
        Sets the grouped_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.
        If this category is a \"parent\" category of other categories, those children will have theirhashes listed in rendering order here, and can be looked up using these hashes againstDestinyItemCategoryDefinition.  In this way, you can build up a visual hierarchy of item categories.  That's what we did,and you can do it too.  I believe in you.  Yes, you, Carl.  (I hope someone named Carl reads this someday)

        :param grouped_category_hashes: The grouped_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type: list[int]
        """

        self._grouped_category_hashes = grouped_category_hashes

    @property
    def hash(self):
        """
        Gets the hash of this DestinyDefinitionsDestinyItemCategoryDefinition.
        The unique identifier for this entity.  Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this DestinyDefinitionsDestinyItemCategoryDefinition.
        The unique identifier for this entity.  Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """
        Gets the index of this DestinyDefinitionsDestinyItemCategoryDefinition.
        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """
        Sets the index of this DestinyDefinitionsDestinyItemCategoryDefinition.
        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """
        Gets the redacted of this DestinyDefinitionsDestinyItemCategoryDefinition.
        If this is true, then there is an entity with this identifier/type combination, but BNet isnot yet allowed to show it.  Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """
        Sets the redacted of this DestinyDefinitionsDestinyItemCategoryDefinition.
        If this is true, then there is an entity with this identifier/type combination, but BNet isnot yet allowed to show it.  Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DestinyDefinitionsDestinyItemCategoryDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
